openapi: 3.0.1
info:
  title: Topsort Endpoints API Reference
  contact:
    email: wicha@topsort.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: https://assets.website-files.com/61a717c57f45d64e5e24eebf/61ee6ccc3f6a684756ef6dec_logo.svg
    backgroundColor: '#fff'
    altText: Topsort
  version: 1.0.1

servers:
  - url: https://demo.api.topsort.com/v1
    description: Demo server (uses test data)
  - url: https://api.topsort.com/v1
    description: Production server (uses live data)

tags:
  - name: Auctions
    description: An auction determines which products should be promoted based on the vendors' bids.
  - name: Events
    description: Significant consumer interactions on the e-commerce site.
  - name: Models
    x-displayName: All Models
    description: |
      ## Auction
      <SchemaDefinition schemaRef="#/components/schemas/Auction" />

      ## Auction Request (General Banners)
      <SchemaDefinition schemaRef="#/components/schemas/AuctionRequestGeneralBanners" />

      ## Auction Request (Homepage Standalone Banners)
      <SchemaDefinition schemaRef="#/components/schemas/AuctionRequestHomepageStandaloneBanners" />

      ## Auction Request (Sponsored Listings)
      <SchemaDefinition schemaRef="#/components/schemas/AuctionRequestSponsoredListings" />

      ## Banner Options
      <SchemaDefinition schemaRef="#/components/schemas/BannerOptions" />

      ## Click Event
      <SchemaDefinition schemaRef="#/components/schemas/ClickEvent" />

      ## Click Response
      <SchemaDefinition schemaRef="#/components/schemas/ClickResponse" />

      ## GeoTargeting
      <SchemaDefinition schemaRef="#/components/schemas/GeoTargeting" />

      ## Impression
      <SchemaDefinition schemaRef="#/components/schemas/Impression" />

      ## Impression Event
      <SchemaDefinition schemaRef="#/components/schemas/ImpressionEvent" />

      ## Impressions Response
      <SchemaDefinition schemaRef="#/components/schemas/ImpressionsResponse" />

      ## Placement
      <SchemaDefinition schemaRef="#/components/schemas/Placement" />

      ## Product
      <SchemaDefinition schemaRef="#/components/schemas/Product" />

      ## Purchase Event
      <SchemaDefinition schemaRef="#/components/schemas/PurchaseEvent" />

      ## Purchase Item
      <SchemaDefinition schemaRef="#/components/schemas/PurchaseItem" />

      ## Purchase Response
      <SchemaDefinition schemaRef="#/components/schemas/PurchaseResponse" />

      ## Session
      <SchemaDefinition schemaRef="#/components/schemas/Session" />

      ## Topsort Error
      <SchemaDefinition schemaRef="#/components/schemas/TopsortError" />

      ## Vendor
      <SchemaDefinition schemaRef="#/components/schemas/Vendor" />

      ## Winner
      <SchemaDefinition schemaRef="#/components/schemas/Winner" />

security:
  - BearerAuth: []

paths:
  /auctions:
    post:
      tags:
        - Auctions
      summary: Creates a new auction
      operationId: createAuction
      requestBody:
        description: >
          The information describing what will be auctioned.
          Topsort will run an auction for each slot type, for which products and/or vendors' bids will compete against each other.
          The products and vendors that will participate are also included in the request.
          Multiple different slot types may be combined into a single request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuctionRequest'
        required: true
      responses:
        201:
          description:
            "The auction results. The list of Winner objects will contain at most slots entries.
            It may contain fewer or no entries at all if there aren't enough products with usable bids.
            Bid become unusable if campaign budget is exhausted, the bid is disqualified to preserve spend pacing, etc."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auction'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        400:
          $ref: '#/components/responses/BadRequest'

  /events:
    post:
      tags:
        - Events
      summary: Report an event
      operationId: reportEvent
      requestBody:
        description: 'Use the `/events` endpoint to notify Topsort about significant consumer interactions on the e-commerce site: impressions -- product links become visible to the consumer; clicks -- the consumer clicks on a product link; and purchases -- the consumer buys some products.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        200:
          description:
            'An object containing the markeplace ID for the event and the Topsort ID for the same event.
            Logging this can facilitate debugging.
            The field name for the TopsortID will be "impressionID", "clickId" or "purchaseId"
            depending on the event in the request.'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ImpressionsResponse'
                  - $ref: '#/components/schemas/ClickResponse'
                  - $ref: '#/components/schemas/PurchaseResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        400:
          $ref: '#/components/responses/BadRequest'

components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    BadRequest:
      description: HTTP status codes as registered with IANA.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TopsortError'

  schemas:
    AuctionRequest:
      anyOf:
        - $ref: '#/components/schemas/AuctionRequestSponsoredListings'
        - $ref: '#/components/schemas/AuctionRequestHomepageStandaloneBanners'
        - $ref: '#/components/schemas/AuctionRequestGeneralBanners'
      example:
        slots:
          listings: 2
          bannerAds: 1
        products:
          - productId: p_SA0238
            quality: 0.75
          - productId: p_SA0250
            quality: 0.9
          - productId: p_SA0259
            quality: 0.7
        vendors:
          - vendorId: v_SA0362
          - vendorId: v_SA0056
        bannerOptions:
          placement: Category-page

    AuctionRequestSponsoredListings:
      type: object
      required:
        - slots
        - products
      properties:
        slots:
          $ref: '#/components/schemas/ListingsSlots'
        products:
          type: array
          description: An array of objects, each describing a product that should participate in the auction.
          items:
            $ref: '#/components/schemas/Product'
        session:
          $ref: '#/components/schemas/Session'
        geoTargeting:
          $ref: '#/components/schemas/GeoTargeting'

    AuctionRequestGeneralBanners:
      type: object
      required:
        - slots
        - products
        - vendors
        - bannerOptions
      properties:
        slots:
          $ref: '#/components/schemas/BannersSlots'
        products:
          type: array
          description: An array of objects, each describing a product that should participate in the auction.
          items:
            $ref: '#/components/schemas/Product'
        vendors:
          type: array
          description: An array of objects, each describing a vendor that should participate in the auction.
          items:
            $ref: '#/components/schemas/Vendor'
        session:
          $ref: '#/components/schemas/Session'
        bannerOptions:
          $ref: '#/components/schemas/BannerOptions'

    AuctionRequestHomepageStandaloneBanners:
      required:
        - slots
        - bannerOptions
      properties:
        slots:
          $ref: '#/components/schemas/BannersSlots'
        session:
          $ref: '#/components/schemas/Session'
        bannerOptions:
          properties:
            placement:
              type: string
              enum:
                - Home-page

    Auction:
      type: object
      properties:
        slots:
          type: object
          properties:
            listings:
              type: object
              properties:
                auctionId:
                  type: string
                  description: Topsort assigned ID for the auction. Should be used in reporting impressions, clicks and purchases.
                  example: AKFU78
                winners:
                  type: array
                  items:
                    $ref: '#/components/schemas/Winner'
                  description:
                    'Array of winner objects in order from highest to lowest bid.
                    May be empty if there were no qualifying bids.'

    GeoTargeting:
      type: object
      description: An object describing geographical information associated with this auction.
      required:
        - location
      properties:
        location:
          description: The location this banner is being run for.
          type: string

    Winner:
      type: object
      required:
        - rank
        - productId
      properties:
        rank:
          type: integer
          description: >
            Where the product's bid ranked in the auction.
            One-based, so the product with rank 1 won the auction.
            In an auction response, the winners array is sorted so rank will match the entry's index.
          minimum: 1
        productId:
          type: string
          description: The marketplace's ID for the product. It will match the ID for a product in the request's products array.
          example: pSA0238
        winnerType:
          type: string
          description: The type of the winning bid, depending on the campaign. It can be product or vendor.
          enum:
            - product
            - vendor
        winnerId:
          type: string
          description: The marketplace's ID of the winnning item, depending on the campaign.
          example: b_Mfk15
        resolvedBidId:
          type: string
          description: An opaque topsort ID to be used when this item is interacted with.
          example: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
        assetUrl:
          type: string
          description: The vendor defined asset that the marketplace has to use as a banner.
          example: 'https://address.to/image.png'

    Product:
      required:
        - productId
      type: object
      properties:
        productId:
          type: string
          format: string
          example: p_SA0238
        quality:
          type: number
          minimum: 0
          maximum: 1
          example: 0.75
          format: float
      xml:
        name: Product
    Vendor:
      required:
        - vendorId
      type: object
      properties:
        vendorId:
          type: string
          format: string
          example: v_89kjm

    Session:
      description: The Session object allows correlating user activity during a session whether or not they are actually logged in.
      required:
        - sessionId
      type: object
      properties:
        sessionId:
          description: >
            Long-lived token identifying the customer interacting with the marketplace.

            If your users are always logged in you may use a hash of your customer ID.
            If your users may interact with your app or site while logged out we recommend generating a random identifier (UUIDv4) on first load and store it on local storage (cookie, local storage, etc) and let it live for at least a year.
          type: string
          example: ebeaf802-6d0a-41a3-ae59-661887c4f6cb
        # consumerId:
        #   description: >
        #     Optional ID identifying the user, this field is required in case your marketplace wants to do cross-device attribution.
        #
        #     Instead of sending us the exact same user ID you are storing in your systems we recommend you to send us a hash of the user ID (SHA1, SHA512, etc).
        #     This field is needed for cross-device attribution.
        #   type: string
        #   example: cid_86hkz2p3171joer80pdkltu7n

    Placement:
      type: object
      required:
        - page
      properties:
        page:
          type: string
          description: A marketplace assigned name for a page.
          example: search_results
        location:
          type: string
          description: A marketplace defined name for a page part.
          example: position_1

    ClickEvent:
      description: ClickEvents are sent to Topsort when the consumer has clicked on an impression. Topsort charges the vendor and pays the marketplace for clicks on impressions in promoted placements on the e-commerce site.
      type: object
      required:
        - eventType
        - session
        - placement
      properties:
        eventType:
          type: string
          description: Discriminator for the type of event.
          enum:
            - Click
        session:
          $ref: '#/components/schemas/Session'
        placement:
          $ref: '#/components/schemas/Placement'
        productId:
          type: string
          description: The product that was clicked.
          example: p_SA0238
        auctionId:
          type: string
          description: Required for promoted products. Must be the ID for the auction the product won.
          example: AKFU78
        id:
          type: string
          description: The marketplace's unique ID for the click.
          example: 234f678-f90c
        occurredAt:
          type: string
          format: date-time
          description: RFC3339 formatted timestamp including UTC offset
          example: '2009-01-01T12:59:59-05:00'
        resolvedBidId:
          type: string
          example: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
      example:
        eventType: Click
        session:
          sessionId: ebeaf802-6d0a-41a3-ae59-661887c4f6cb
        placement:
          page: Search-page
          location: listing-1
        resolvedBidId: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=

    ImpressionEvent:
      description: >
        A product has become visible to the consumer.
        In case you cannot send the impression when the product is visible, send us an impression event when the product was rendered in the HTML or if that's also not possible when your API returns the results.
        It is important to select the most specific event so that your vendors have more accurate CTR metrics, which allow them to better predict their campaigns.
      type: object
      required:
        - eventType
        - session
        - impressions
      properties:
        eventType:
          type: string
          description: Discriminator for the type of event.
          enum:
            - Impression
        session:
          $ref: '#/components/schemas/Session'
        impressions:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Impression'
          example:
            - resolvedBidId: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
              id: 234f678-f90c
              placement:
                page: Search-page
                location: listing-1
            - resolvedBidId: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
              placement:
                page: Search-page
                location: listing-2
        occurredAt:
          type: string
          format: date-time
          description: RFC3339 formatted timestamp including UTC offset
          example: '2022-01-23T12:34:56-05:00'

    Impression:
      type: object
      required:
        - placement
      properties:
        placement:
          $ref: '#/components/schemas/Placement'
        productId:
          type: string
          description: The product that was rendered.
          example: p_SA0238
        auctionId:
          type: string
          description: Required for promoted products. Must be the ID for the auction the product won.
          example: AKFU78
        id:
          type: string
          description: The marketplace's ID for the impression.
          example: 234f678-f90c
        resolvedBidId:
          type: string
          example: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=

    PurchaseEvent:
      description: The consumer has purchased some products.
      type: object
      required:
        - eventType
        - session
        - id
        - purchasedAt
        - items
      properties:
        eventType:
          type: string
          description: Discriminator for the type of event.
          enum:
            - Purchase
        session:
          $ref: '#/components/schemas/Session'
        id:
          type: string
          description: The marketplace assigned ID for the order.
          example: o:567-123
        purchasedAt:
          type: string
          description: RFC3339 formatted timestamp including UTC offset
          example: '2021-10-12T07:20:50.52Z'
          format: date-time
        items:
          type: array
          description: Items purchased.
          minItems: 1
          items:
            $ref: '#/components/schemas/PurchaseItem'

    PurchaseItem:
      type: object
      required:
        - productId
        - unitPrice
      properties:
        productId:
          type: string
          description: The marketplace ID of the product being purchased.
          example: p_SA0238
        auctionId:
          type: string
          description: If known, the product's auction ID if the consumer clicked on a promoted link before purchasing.
          example: AKFU78
        quantity:
          type: integer
          minimum: 1
          default: 1
          description: Count of product purchased.
          example: 2
        unitPrice:
          type: integer
          minimum: 1
          description: The price of a single item in minor currency units. For example, in the US (currency code "USD") the unit price is specified in cents.
          example: 1295
        resolvedBidId:
          type: string
          example: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
      example:
        productId: p_SA0238
        unitPrice: 1295
        resolvedBidId: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=

    Event:
      oneOf:
        - $ref: '#/components/schemas/ImpressionEvent'
        - $ref: '#/components/schemas/ClickEvent'
        - $ref: '#/components/schemas/PurchaseEvent'

    ImpressionResponse:
      type: object
      properties:
        impressionId:
          type: string
          description: Topsort assigned ID for the impression.
          example: 70ed4d78-34aa-42c7-b6e2-6a670568b6e3
        id:
          type: string
          description: The marketplace's ID for the impression, if provided.
          example: 234f678-f90c
      required:
        - impressionId

    ImpressionsResponse:
      type: object
      properties:
        impressions:
          type: array
          description: The collection of all impressions that were processed correctly.
          items:
            $ref: '#/components/schemas/ImpressionResponse'
      example:
        impressions:
          - impressionId: 70ed4d78-34aa-42c7-b6e2-6a670568b6e3
            id: 234f678-f90c
          - impressionId: 41505d1d-c196-4fe5-a89d-fa3a2c8a94c2

    ClickResponse:
      type: object
      properties:
        clickId:
          type: string
          description: Topsort assigned ID for the click.
          example: 00b55a66-a221-4cdd-8c76-8e422558f1c3
        id:
          type: string
          description: The marketplace's ID for the click, if provided.
          example: 234f678-f90c
      required:
        - clickId

    PurchaseResponse:
      type: object
      properties:
        purchaseId:
          type: string
          description: Topsort assigned ID for the purchase.
          example: 3f15c9a5-5129-4359-b39c-099e273afe66
        id:
          type: string
          description: The marketplace's ID for the purchase, if provided.
          example: 234f678-f90c
      required:
        - purchaseId

    ListingsSlots:
      description:
        'The Slots object specifies how many auctions winners should be
        returned for each promotion type. The promotion types depend on
        the marketplace configuration. For sponsored listings, use the
        "listings" key.'
      type: object
      properties:
        listings:
          type: integer
          example: 2
          minimum: 1

    BannersSlots:
      description:
        'The Slots object specifies how many auctions winners should be
        returned for each promotion type. The promotion types depend on
        the marketplace configuration. For banner ads, use the "bannerAds"
        key.'
      type: object
      properties:
        bannerAds:
          type: integer
          example: 2
          minimum: 1

    BannerOptions:
      description: 'The BannerOptions object specifies options to take into consideration when running a banner auction.'
      type: object
      properties:
        placement:
          type: string
          enum:
            - Home-page
            - Category-page
            - Search-page

    TopsortError:
      type: object
      required:
        - errCode
      properties:
        errCode:
          type: string
          enum:
            - bad_request
            - internal_server_error
            - invalid_api_key
            - invalid_auction_id
            - invalid_event_type
            - invalid_promotion_type
            - invalid_session
            - missing_placement
            - missing_product_id
            - missing_promotion_type
            - missing_purchased_at
            - missing_session
            - missing_slots
            - no_products
            - no_purchase_items
            - too_few_impressions
            - too_few_slots
        docUrl:
          enum: ['https://topsort-api.redoc.ly']
        message:
          type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
