openapi: 3.0.1
info:
  title: Topsort Endpoints v2 API Reference
  description: >-
    In order for a storefront to be able to run auctions in Topsort and report auction-related events back to Topsort,
    both the `/v2/auctions` and `/v2/events` endpoints must be integrated.
    Below are the endpoint and model definitions for each.
  contact:
    email: wicha@topsort.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: https://assets.topsort.com/Topsort_logo_icon_dark.svg
    backgroundColor: '#fff'
    altText: Topsort
  version: 2.0.0

servers:
  - url: https://api.topsort.com
    description: Base API URL

tags:
  - name: Auctions
    description: An auction determines which products should be promoted based on the vendors' bids.
  - name: Events
    description: |
      **The specification details, particularly around placement data, may change in the short term.**
      **If this is not acceptable for your integration, please use [Events V1](https://docs.topsort.com/reference/reportevent) as an alternative.**

      Significant consumer interactions on the marketplace app.
  - name: Toptimize
    description: |
      An out-of-the-box solution for prediction, ranking, retrieval, and other elements of ad selection.
  - name: Models
    x-displayName: All Models
    description: |
      ## AssetSource
      <SchemaDefinition schemaRef="#/components/schemas/AssetSource" />

      ## Auction (Banners)
      <SchemaDefinition schemaRef="#/components/schemas/BannersAuction" />

      ## Auction (Sponsored Listings)
      <SchemaDefinition schemaRef="#/components/schemas/SponsoredListingsAuction" />

      ## Auction Result (Banners)
      <SchemaDefinition schemaRef="#/components/schemas/BannersAuctionResult" />

      ## Auction Result (Sponsored Listings)
      <SchemaDefinition schemaRef="#/components/schemas/SponsoredListingsAuctionResult" />

      ## Category
      <SchemaDefinition schemaRef="#/components/schemas/Category" />

      ## Category Disjunction
      <SchemaDefinition schemaRef="#/components/schemas/CategoryDisjunction" />

      ## Click
      <SchemaDefinition schemaRef="#/components/schemas/Click" />

      ## Error
      <SchemaDefinition schemaRef="#/components/schemas/Error" />

      ## Events Request
      <SchemaDefinition schemaRef="#/components/schemas/EventsRequest" />

      ## Geotargeting
      <SchemaDefinition schemaRef="#/components/schemas/GeoTargeting" />

      ## Impression
      <SchemaDefinition schemaRef="#/components/schemas/Impression" />

      ## Products
      <SchemaDefinition schemaRef="#/components/schemas/Products" />

      ## Purchase
      <SchemaDefinition schemaRef="#/components/schemas/Purchase" />

      ## Purchase Item
      <SchemaDefinition schemaRef="#/components/schemas/PurchaseItem" />

      ## Winner (Banners)
      <SchemaDefinition schemaRef="#/components/schemas/BannersWinner" />

      ## Winner (Sponsored Listings)
      <SchemaDefinition schemaRef="#/components/schemas/SponsoredListingsWinner" />

      ## Page
      <SchemaDefinition schemaRef="#/components/schemas/Page" />

      ## RankingRequest
      <SchemaDefinition schemaRef="#/components/schemas/RankingRequest" />

      ## RankingResult
      <SchemaDefinition schemaRef="#/components/schemas/RankingResult" />

      ## RankingWinner
      <SchemaDefinition schemaRef="#/components/schemas/RankingWinner" />

security:
  - BearerAuth: []

paths:
  /v2/auctions:
    post:
      tags:
        - Auctions
      summary: Create auctions
      description: |
        Use the `/auctions` endpoint to create auctions. Each batch of auction requests can be a combination of 
        sponsored listing auctions and banner auctions. Each auction type has a unique body schemas.
      operationId: createAuctions
      requestBody:
        description: |
          The information describing what will be auctioned.
          Topsort will run an auction for each batched auction request, for which products' bids will compete against each other.
        content:
          application/json:
            schema:
              type: object
              properties:
                auctions:
                  type: array
                  items:
                    $ref: '#/components/schemas/AuctionRequest'
                  minItems: 1
                  maxItems: 5
              required:
                - auctions
              example:
                auctions:
                  - type: listings
                    slots: 1
                    category:
                      disjunctions:
                        - - c_large
                          - c_medium
                  - type: listings
                    slots: 2
                    products:
                      ids:
                        - p_PJbnN
                        - p_ojng4
                        - p_8VKDt
                        - p_Mfk15
                    geoTargeting:
                      location: New York
                  - type: banners
                    slots: 1
                    slotId: categories-ribbon-banner
                    category:
                      id: c_yogurt
                  - type: banners
                    slots: 1
                    slotId: homepage-banner
        required: true
      responses:
        201:
          description: >
            The auction results.
            The list of winners will contain at most `slots` entries per auction.
            It may contain fewer or no entries at all if there aren't enough products with usable bids, that is,
            a bid amount greater than the reserve price and belonging to a campaign with enough remaining budget.
            Bids become unusable if campaign budget is exhausted, the bid is disqualified to preserve spend pacing, etc.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuctionResult'
                    minItems: 1
                    maxItems: 5
                required:
                  - results
                example:
                  results:
                    - winners:
                        - rank: 1
                          type: product
                          id: p_Mfk11
                          resolvedBidId: WyJiX01mazExIiwiMTJhNTU4MjgtOGVhZC00Mjk5LTMyNjYtY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0==
                          campaignId: 82588593-85c5-47c0-b125-07e315b7f2b3
                      error: false
                    - winners:
                        - rank: 1
                          type: product
                          id: p_Mfk15
                          resolvedBidId: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
                          campaignId: 4bcc6093-f367-4df2-aa1b-7c1674dd6441
                        - rank: 2
                          type: product
                          id: p_PJbnN
                          resolvedBidId: WyJlX1BKYm5OIiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
                          campaignId: a72e4e43-55b5-4d08-81bb-cbb57df59c72
                      error: false
                    - winners:
                        - rank: 1
                          type: product
                          id: p_PJbnN
                          resolvedBidId: WyJlX1BKYm5OIiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwiYmFubmVyQWRzIiwiZGVmYXVsdCIsIiJd
                          campaignId: 1156ef4e-0109-4190-ac97-4436c82358d2
                          asset:
                            - url: https://topsort.cdnprovider.com/lhs-banner-image-for-p_PJbnN-1x.png
                      error: false
                    - winners: []
                      error: false
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /v2/auctions/sponsored-brand:
    post:
      tags:
        - Auctions
      summary: Create sponsored brand auctions
      operationId: createSponsoredBrandAuctions
      requestBody:
        description: |
          The information describing what will be auctioned.
          Topsort will run an auction for each batched auction request, for which products' bids will compete against each other.
        content:
          application/json:
            schema:
              type: object
              properties:
                auctions:
                  type: array
                  items:
                    $ref: '#/components/schemas/SponsoredBrandAuctionRequest'
                  minItems: 1
                  maxItems: 5
              required:
                - auctions
        required: true
      responses:
        201:
          description: >
            The auction results.
            The list of winners will contain at most `winners` entries per auction.
            It may contain fewer or no entries at all if there aren't enough products with usable bids, that is,
            a bid amount greater than the reserve price and belonging to a campaign with enough remaining budget.
            Bids become unusable if campaign budget is exhausted, the bid is disqualified to preserve spend pacing, etc.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/SponsoredBrandAuctionResult'
                    minItems: 1
                    maxItems: 5
                required:
                  - results
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /v2/auctions/travel:
    post:
      tags:
        - Auctions
      summary: Create travel auctions
      description:
        Use the `/auctions/travel` endpoint to create batch auctions for sponsored travel listings. We support
        two types of sponsored travel listings, hotels and flights. Each batch of auction requests can be a combination
        of sponsored hotel and flight listing auctions. Each auction type has a unique body schemas.
      operationId: createTravelAuctions
      requestBody:
        description: |
          The information describing what will be auctioned.
          Topsort will run an auction for each batched auction request, for which travel products' bids will compete 
          against each other.
        content:
          application/json:
            schema:
              type: object
              properties:
                auctions:
                  type: array
                  items:
                    $ref: '#/components/schemas/TravelAuctionRequest'
                  minItems: 1
                  maxItems: 5
              required:
                - auctions
              example:
                auctions:
                  - type: hotels
                    slots: 2
                    products:
                      - id: hotel-1
                        qualityScore: 0.7
                      - id: hotel-2
                    travelContext:
                      travelStartDate: 2025-01-01
                      travelEndDate: 2025-01-15
                      site: argentina
                      passengers: 2
                      travelerType: couple
                  - type: flights
                    slots: 2
                    products:
                      - id: 'L0_SAO-ORL'
                        variationID: '001'
                        price: 1500
                        qualityScore: 0.7
                      - id: 'L0_SAO-ORL'
                        variationID: '002'
                        price: 2000
                    travelContext:
                      site: argentina
                      passengers: 2
                      route: SAO-ORL
                      flightType: one-way
        required: true
      responses:
        201:
          description: >
            The auction results.
            The list of winners will contain at most `winners` entries per auction.
            It may contain fewer or no entries at all if there aren't enough products with usable bids, that is,
            a bid amount greater than the reserve price and belonging to a campaign with enough remaining budget.
            Bids become unusable if campaign budget is exhausted, the bid is disqualified to preserve spend pacing, etc.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/TravelAuctionResult'
                    minItems: 1
                    maxItems: 5
                required:
                  - results
                example:
                  - results:
                      - resultType: hotels
                        winners:
                          - rank: 1
                            id: hotel-1
                            resolvedBidId: ChAHd-K97Xs8MNRELdY9VCeJFiBCk1_aEYz8eb-WZqyhzL4EFhBCk5Mt_X2_b8Yu_vXJgzPWJhVLBTFRBTGssk9
                            campaignId: 8b816367-da17-4c65-9a26-391edf01a10d
                          - rank: 2
                            id: hotel-2
                            resolvedBidId: ChAJe-M23Yr5QPTEFdX7VBgJGhCDm2_wDXy6cb-XZpxjxK6GHhCDm3Ku_W1_c9Zw_wYHfzQYKjTLBVGQBTLttu6
                            campaignId: 7be0d8c8-243c-41af-bb43-b43ef4935672
                      - resultType: flights
                        winners:
                          - rank: 1
                            id: L0_SAO-ORL
                            resolvedBidId: ChAKf-N45Vq3LOTEGcW9VDhKHjADk3_zCXx8db-XZsyiwM2HIjADk4Lr_X0_b9Xw_uKHgyRZKhUKCTHQCTHrrh7
                            campaignId: 8ab7b29e-1934-4ec9-ad87-60c285bc7f38
                            variationID: '002'
                          - rank: 2
                            id: L0_SAO-ORL
                            resolvedBidId: ChAGg-P56Wu4MRUEHdX8VEfLHkBEk4_aEXz9fb-YZtxjwN3IJkBEk5Ms_W2_c8Yx_vZJhzSXKlVLDUJQDUJssl8
                            campaignId: cb8ed0a7-0ecf-4ffb-a863-022f862649ec
                            variationID: '001'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /v2/events:
    post:
      tags:
        - Events
      summary: Report events
      description: |
        Use the `/events` endpoint to report user interactions and activity in on a marketplace:
        - **Impressions** — a user viewed an asset.
        - **Clicks** — a user clicked on an asset.
        - **Purchases** — a user created an order.
        - **Pageviews** - a user navigate on a page.

        Interactions require either a `resolvedBidId`, for sponsored events coming from the `/v2/auctions` response,
        or an `entity` that describes the entity that was interacted with, in the case of organic or non-sponsored events.

        For analytics purposes, you can use the `placement` field to differentiate different listings or banners.
        For example, on a product page with a carousel of products, you can track impressions and clicks related to the carousel
        by including `/carousel` at the end of the `path` field in the `placement` object. This allows you to monitor
        the performance of carousel products in the [Data Room](https://docs.topsort.com/knowledge-base/analytics/data-room/).

      operationId: reportEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventsRequest'
        required: true
      responses:
        204:
          description: All events were reported successfully.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        400:
          $ref: '#/components/responses/BadRequest'
  /v2/events/beta/link-users:
    post:
      tags:
        - Events
      summary: '[Beta] Report Link Users'
      description: |
        Use the `/events/beta/link-users` endpoint to report to Topsort linked opaque user IDs.

        This endpoint allows linking two opaque user IDs for attribution purposes. The `from` field represents the 
        original opaque user ID, and the `to` field represents the target opaque user ID to be linked. The request 
        will fail if the `from` and `to` opaque user IDs are the same.

        Contact your sales representative to gain access to this endpoint and start using it.
      x-beta: 'true'
      operationId: linkUsers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                from:
                  type: string
                  description: The opaque user ID of the original user account.
                  minLength: 1
                  maxLength: 64
                to:
                  type: string
                  description: The opaque user ID of the target user account to be linked.
                  minLength: 1
                  maxLength: 64
              required:
                - from
                - to
              example:
                from: 'user123'
                to: 'user456'
        required: true
      responses:
        204:
          description: Users account link was reported successfully.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        400:
          $ref: '#/components/responses/BadRequest'
  /v2/rank:
    post:
      tags:
        - Toptimize
      summary: 'Rank objects'
      operationId: createRanking
      requestBody:
        description: |
          The context information to get the ranking, to rank organic and sponsored products.

        x-beta: 'true'
        content:
          application/json:
            schema:
              type: object
              properties:
                ranking:
                  type: array
                  items:
                    $ref: '#/components/schemas/RankingRequest'
                  minItems: 1
                  maxItems: 5
              required:
                - ranking
              example:
                ranking:
                  - type: listings
                    slots: 3
                    pageSize: 3
                    category:
                      ids: ['sneakers', 'shoes']
                    products:
                      ids: ['p_PJbnN', 'p_ojng4']
        required: true
      responses:
        201:
          description: >
            The ranking results.
            The list of winners will contain at most `slots` entries per auction.
            It may contain fewer or no entries at all if there aren't enough products to fill the slots.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankingResult'
                    minItems: 1
                    maxItems: 5
                required:
                  - results
                example:
                  results:
                    - products:
                        - rank: 1
                          type: organic
                          id: p_Mfk11
                          resolvedItemId: WyJiX01mazExIiwiMTJhNTU4MjgtOGVhZC00Mjk5LTMyNjYtY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0==
                        - rank: 2
                          type: sponsored
                          id: p_Mfk15
                          resolvedItemId: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
                        - rank: 3
                          type: organic
                          id: p_PJbnN
                          resolvedItemId: WyJlX1BKYm5OIiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
                      error: false
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'

components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    BadRequest:
      description: HTTP status codes as registered with IANA.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Category:
      oneOf:
        - type: object
          title: Single Category
          $ref: '#/components/schemas/SingleCategory'
        - type: object
          title: Multiple Categories
          description: A set of categories for the purpose of running an auction.
          required:
            - ids
          properties:
            ids:
              type: array
              description: |
                An array containing the category IDs of the bids that will participate in an auction.
                In order to participate in an auction, a bid product must belong to **all** of the categories provided in the auction request.
              items:
                type: string
                description: A category ID.
                minLength: 1
              minItems: 1
              example:
                - c_men_clothing
                - c_shoes
        - type: object
          title: Category Disjunctions
          description: Multiple disjunctions of categories for the purpose of running an auction.
          required:
            - disjunctions
          properties:
            disjunctions:
              type: array
              description: |
                An array of disjunctions.

                In order to participate in an auction, a bid product must belong to at least one of the categories of the disjunction provided in the auction request.
              items:
                $ref: '#/components/schemas/CategoryDisjunction'
              minItems: 1
              maxItems: 5
              example:
                - - c_red
                  - c_blue

    SingleCategory:
      type: object
      description: A category for the purpose of running an auction.
      required:
        - id
      properties:
        id:
          type: string
          description: The category ID of the bids that will participate in an auction.
          minLength: 1
          example: c_yogurt

    CategoryDisjunction:
      type: array
      description: |
        An array of category IDs, describing a category disjunction.

        A bid entity must belong to at least one of the categories in the disjunction in order to participate in the auction.
      items:
        type: string
        description: A category ID.
        minimum: 1
      minItems: 1

    Device:
      type: string
      description: The device for which the ads are meant for.
      enum:
        - desktop
        - mobile
      default: desktop

    Page:
      type: object
      title: HomePage
      required:
        - type
        - pageId
      properties:
        type:
          type: string
          enum:
            - home
            - category
            - PDP
            - search
            - cart
            - other
          description: Type of page.
          example: 'category'
        value:
          oneOf:
            - type: string
              description: Detail of the page, depending on the type
              example: 'electronics'
            - type: array
              items:
                type: string
                description: Only valid for type cart. Items on the cart
                example: '[ "coffee", "cookies", "apples" ]'
              minItems: 1
        pageId:
          type: string
          description: Identifies the page
          example: '/category/electronics'

    OpaqueUserID:
      type: string
      description:
        The opaque user ID is an anonymized unique identifier that maps to the original user ID without revealing the
        original value. This identifier allows Topsort to correlate user activity between auctions and user
        interactions, independent of the user's logged-in status. For apps or sites where users might interact while
        logged out, we recommend generating a random identifier (UUIDv7) on the first load, storing it on local storage
        (cookie, local storage, etc), and letting it live for at least a year. Otherwise, if your users are always
        logged in for interactions, you may use a hash of your customer ID. Correct purchase attribution requires
        long-lived opaque user IDs consistent between auction and event requests.
      example: 71303ce0-de89-496d-8270-6434589615e8

    PlacementId:
      type: integer
      format: int32
      description: The marketplace's ID of the placement where the ad will appear.

    GeoTargeting:
      type: object
      description: An object describing geographical information associated with this auction.
      required:
        - location
      properties:
        location:
          description: The location this auction is being run for.
          type: string

    SponsoredListingsAuction:
      type: object
      description: |
        Describes the intent of running a sponsored listings auction.

        Exactly **one** of the following fields must be set:
          * `products`
          * `category`
      properties:
        type:
          type: string
          enum:
            - listings
          description: Discriminator for the type of auction.
        slots:
          type: integer
          format: int32
          minimum: 1
          description: Specifies the maximum number of auction winners that should be returned.
        category:
          $ref: '#/components/schemas/Category'
        searchQuery:
          type: string
          description: The search string provided by a user.
        products:
          $ref: '#/components/schemas/Products'
        geoTargeting:
          $ref: '#/components/schemas/GeoTargeting'
        opaqueUserId:
          $ref: '#/components/schemas/OpaqueUserID'
        placementId:
          $ref: '#/components/schemas/PlacementId'
      required:
        - type
        - slots
      example:
        type: listings
        slots: 2
        products:
          ids:
            - p_PJbnN
            - p_ojng4
            - p_8VKDt
            - p_Mfk15
        # category:
        #   id: c_yogurt
        # searchQuery: Noosa Peach
        geoTargeting:
          location: New York

    BannersAuction:
      type: object
      description: |
        Describes the intent of running a banner ads auction.

          * For **Landing Page** banners, `category` and `searchQuery` must be empty.
          * For **Category** banners, the `category` field must be set.
          * For **Keywords** banners, the `searchQuery` field must be set.
      properties:
        type:
          type: string
          enum:
            - banners
          description: Discriminator for the type of auction.
        slots:
          type: integer
          format: int32
          minimum: 1
          description: Specifies the maximum number of auction winners that should be returned.
        category:
          $ref: '#/components/schemas/Category'
        searchQuery:
          type: string
          description: The search string provided by a user.
        device:
          $ref: '#/components/schemas/Device'
        geoTargeting:
          $ref: '#/components/schemas/GeoTargeting'
        slotId:
          type: string
          description: The ID of the banner placement for which this auction will be run for.
          minLength: 1
        products:
          $ref: '#/components/schemas/Products'
        opaqueUserId:
          $ref: '#/components/schemas/OpaqueUserID'
        placementId:
          $ref: '#/components/schemas/PlacementId'
      required:
        - type
        - slots
        - slotId
      example:
        type: banners
        slots: 1
        slotId: categories-ribbon-banner
        category:
          id: c_yogurt

    AuctionRequest:
      description: Describes the intent of running a single auction.
      oneOf:
        - $ref: '#/components/schemas/SponsoredListingsAuction'
        - $ref: '#/components/schemas/BannersAuction'

    RankingRequest:
      type: object
      description: |
        Describes the context related to a Ranking request
      properties:
        type:
          type: string
          enum:
            - listings
          description: Type of object to be ranked
        slots:
          type: integer
          format: int32
          minimum: 1
          description: Specifies the maximum number of ranked objects that should be returned.
        pageSize:
          type: integer
          format: int32
          minimum: 1
          description: Specifies the maximum number of ranked objects per page that should be returned.
        page:
          $ref: '#/components/schemas/Page'
        category:
          $ref: '#/components/schemas/Category'
        device:
          $ref: '#/components/schemas/Device'
        geoTargeting:
          $ref: '#/components/schemas/GeoTargeting'
        products:
          $ref: '#/components/schemas/Products'
        opaqueUserId:
          type: string
          description: |
            <p>The opaque user ID allows correlating user activity, such as Impressions, Clicks and Purchases,
            whether or not they are actually logged in. It must be long lived (at least a year) so that Topsort can attribute purchases.
            </p>
            <p>
            If your users are always logged in you may use a hash of your customer ID.
            If your users may interact with your app or site while logged out we
            recommend generating a random identifier (UUIDv4) on first load and store it on
            local storage (cookie, local storage, etc) and let it live for at least a year.
            </p>
          minLength: 1
          example: 71303ce0-de89-496d-8270-6434589615e8
      required:
        - type
        - slots
        - pageSize
        - page
        - opaqueUserId
      example:
        type: listings
        slots: 10
        pageSize: 10
        category:
          ids: ['sneakers', 'shoes']
        products:
          ids: ['p_PJbnN', 'p_ojng4']

    AuctionResult:
      discriminator:
        propertyName: resultType
        mapping:
          listings: '#/components/schemas/SponsoredListingsAuctionResult'
          banners: '#/components/schemas/BannersAuctionResult'
      oneOf:
        - $ref: '#/components/schemas/SponsoredListingsAuctionResult'
        - $ref: '#/components/schemas/BannersAuctionResult'

    TravelAuctionResult:
      oneOf:
        - $ref: '#/components/schemas/HotelsAuctionResult'
        - $ref: '#/components/schemas/FlightsAuctionResult'

    BannersAuctionResult:
      type: object
      properties:
        resultType:
          type: string
        winners:
          type: array
          items:
            $ref: '#/components/schemas/BannersWinner'
          description: >
            Array of winner objects in order from highest to lowest bid.
            It will be empty if there were no qualifying bids or if there was an error.
        error:
          type: boolean
          description: A boolean indicating whether this auction was resolved successfully.
          example: false
      required:
        - winners
        - error
        - resultType

    SponsoredListingsAuctionResult:
      type: object
      properties:
        resultType:
          type: string
        winners:
          type: array
          items:
            $ref: '#/components/schemas/SponsoredListingsWinner'
          description: >
            Array of winner objects in order from highest to lowest bid.
            It will be empty if there were no qualifying bids or if there was an error.
        error:
          type: boolean
          description: A boolean indicating whether this auction was resolved successfully.
          example: false
      required:
        - winners
        - error
        - resultType

    SponsoredListingsWinner:
      type: object
      required:
        - rank
        - type
        - id
        - resolvedBidId
        - campaignId
      properties:
        rank:
          type: integer
          format: int32
          description: >
            Where the product's bid ranked in the auction.
            One-based, so the product with rank 1 won the auction.
            In an auction response, the winners array is sorted so rank will match the entry's index.
          minimum: 1
        type:
          type: string
          description: The target type of the winning bid.
          enum:
            - product
            - vendor
            - brand
            - url
        id:
          type: string
          description: |-
            The marketplace's ID of the winning entity, depending on the target of the campaign.
          example: p_Mfk15
        resolvedBidId:
          type: string
          description: An opaque Topsort ID to be used when this item is interacted with.
          example: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
        campaignId:
          type: string
          description: The ID of the campaign that won the auction.
          example: 4bcc6093-f367-4df2-aa1b-7c1674dd6441

    BannersWinner:
      type: object
      required:
        - rank
        - type
        - id
        - resolvedBidId
        - asset
      properties:
        rank:
          type: integer
          format: int32
          description: >
            Where the product's bid ranked in the auction.
            One-based, so the product with rank 1 won the auction.
            In an auction response, the winners array is sorted so rank will match the entry's index.
          minimum: 1
        type:
          type: string
          description: The target type of the winning bid.
          enum:
            - product
            - vendor
            - brand
            - url
        id:
          type: string
          description: |-
            The marketplace's ID of the winning entity, depending on the target of the campaign.
          example: p_Mfk15
        resolvedBidId:
          type: string
          description: An opaque Topsort ID to be used when this item is interacted with.
          example: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
        campaignId:
          type: string
          description: The ID of the campaign that won the auction.
          example: 4bcc6093-f367-4df2-aa1b-7c1674dd6441
        asset:
          description: The list of available sources for a banner.
          type: array
          items:
            $ref: '#/components/schemas/AssetSource'
          minItems: 1

    HotelsAuctionResult:
      $ref: '#/components/schemas/SponsoredListingsAuctionResult'

    FlightsAuctionResult:
      type: object
      properties:
        resultType:
          type: string
        winners:
          type: array
          items:
            $ref: '#/components/schemas/FlightsWinner'
          description: >
            Array of winner objects in order from highest to lowest bid.
            It will be empty if there were no qualifying bids or if there was an error.
        error:
          type: boolean
          description: A boolean indicating whether this auction was resolved successfully.
          example: false
      required:
        - winners
        - error
        - resultType

    FlightsWinner:
      type: object
      required:
        - rank
        - type
        - id
        - resolvedBidId
        - campaignId
        - variationID
      properties:
        rank:
          type: integer
          format: int32
          description: >
            Where the product's bid ranked in the auction.
            One-based, so the product with rank 1 won the auction.
            In an auction response, the winners array is sorted so rank will match the entry's index.
          minimum: 1
        type:
          type: string
          description: The target type of the winning bid.
          enum:
            - product
        id:
          type: string
          description: |-
            The marketplace's ID of the winning flight product, depending on the target of the campaign.
          example: p_Mfk15
        resolvedBidId:
          type: string
          description: An opaque Topsort ID to be used when this item is interacted with.
          example: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
        campaignId:
          type: string
          description: The ID of the campaign that won the auction.
          example: 4bcc6093-f367-4df2-aa1b-7c1674dd6441
        variationID:
          type: string
          description: The marketplace's ID for the winning flight product's variation.

    RankingResult:
      type: object
      properties:
        resultType:
          type: string
        results:
          type: array
          items:
            $ref: '#/components/schemas/RankingWinner'
          description: >
            Array of ranking objects in order from highest to lowest relevancy.
        error:
          type: boolean
          description: A boolean indicating whether this auction was resolved successfully.
          example: false
      required:
        - results
        - error
        - resultType

    RankingWinner:
      type: object
      required:
        - rank
        - type
        - id
        - resolvedItemId
      properties:
        rank:
          type: integer
          format: int32
          description: >
            Where is the product ranked in the auction.
          minimum: 1
        type:
          type: string
          description: The target type of the winning bid.
          enum:
            - organic
            - sponsored
        id:
          type: string
          description: |-
            The marketplace's ID of the ranked entity.
          example: p_Mfk15
        resolvedItemId:
          type: string
          description: An opaque Topsort ID to be used when this item is interacted with.
          example: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=

    # Dimensions:
    #   type: object
    #   description: The dimensions of this source.
    #   properties:
    #     width:
    #       type: integer
    #       format: int32
    #       description: The source width in pixels.
    #       minimum: 1
    #     height:
    #       type: integer
    #       format: int32
    #       description: The source height in pixels.
    #       minimum: 1
    #   required:
    #     - width
    #     - height

    AssetSource:
      description: A source available for an asset (banner or video).
      type: object
      properties:
        # mimeType:
        #   type: string
        #   description: The MIME type of this source.
        #   example: image/png
        # dimensions:
        #   $ref: '#/components/schemas/Dimensions'
        # fileSize:
        #   type: integer
        #   format: int32
        #   description: The file size in bytes.
        #   example: 238490
        url:
          type: string
          format: uri
          description: >
            A vendor provided asset that the marketplace has to use as a banner.
            The asset will be served by Topsort's CDN.
      required:
        # - mimeType
        # - dimensions
        # - fileSize
        - url

    Products:
      required:
        - ids
      type: object
      properties:
        ids:
          type: array
          description: >
            An array of product IDs that should participate in the auction.
            We recommend sending no more than 500 products per auction.
          items:
            type: string
            description: >
              The marketplace's ID of a product which will participate in the auction.
              These ID must match those in the catalog integration with Topsort.
            example: p_SA0238
            uniqueItems: true
            minLength: 1
          minItems: 1
          maxItems: 10000
        qualityScores:
          type: array
          description: |
            An array of marketplace defined quality scores, each corresponding to the product ID with matching array index.
            If given, these values will be combined with our internal quality scores to provide a score
            that better represents the relevance of the participating products.
            Note that the length of this array must be the same as the length of the `ids` array and
            that the values must be between 0 and 1.
          items:
            type: number
            minimum: 0
            maximum: 1
            exclusiveMinimum: true
            example: 0.75
            format: double
          minItems: 1
          maxItems: 10000

    SponsoredBrandAuctionRequest:
      type: object
      description: |
        Describes the intent of running a sponsored brand auction.

        Exactly **one** of the following fields must be set:
          * `products`
          * `category`
      required:
        - winners
        - placementId
        - triggers
      properties:
        winners:
          type: integer
          format: int32
          minimum: 1
          description: Specifies the maximum number of auction winners that should be returned.
        placementId:
          type: string
          x-stoplight:
            id: biqordtdbp58t
        triggers:
          type: object
          x-stoplight:
            id: ne5n2vzri6o92
          properties:
            category:
              $ref: '#/components/schemas/SingleCategory'
            products:
              $ref: '#/components/schemas/Products'
        opaqueUserId:
          $ref: '#/components/schemas/OpaqueUserID'
      x-examples:
        Example 1:
          auctions:
            - winners: 2
              placementId: some-placement
              triggers:
                products:
                  ids:
                    - '1'
                    - '8'

    SponsoredBrandAuctionResult:
      type: object
      properties:
        winners:
          type: array
          items:
            $ref: '#/components/schemas/SponsoredBrandWinner'
          description: |
            Array of winner objects in order from highest to lowest bid. It will be empty if there were no qualifying bids or if there was an error.
        error:
          type: boolean
          description: A boolean indicating whether this auction was resolved successfully.
          example: false
      required:
        - winners
        - error
      x-examples:
        Example 1:
          results:
            - winners:
                - rank: 1
                  resolvedBidId: ChAGc-G66Wt7LKQEOcW8VBdIEhABjz_zDXx7db-ZYpxiwJ3DGhABjr4Lt_J0_a7Xv_uIfyOXIgUKATEQATDrrg8
                  productId: '1'
                  title: Brand Example Promo 1
                  assets:
                    - url: 'https://assets.hosted.topsort.com/5bcccb92e5eaaa73ce9fcc545e944865bf70e9b60e5a048979769282450343c4/example-banner-1.png'
                      role: image
                      contentType: image/png
                      contentLength: 33902
                      width: 920
                      height: 920
                    - url: 'https://assets.hosted.topsort.com/c27c9cd94badc90fb50827e144dfacb2f51a601560905b950f525cec725ea85f/example-logo-1.png'
                      role: logo
                      contentType: image/png
                      contentLength: 80648
                      width: 264
                      height: 264
                  campaignId: 018f3ff3-0d7c-7b75-bf99-629c62c09dc3
                - rank: 2
                  resolvedBidId: ChAGc-G66Wt7LKQEOcW8VBdIEhABk0pue7N5wYmzE04uO_iOGhABjr4Lt_J0_a7Xv_uIfyOXIgUKATgQATDrrg8
                  productId: '8'
                  title: Brand Example Promo 2
                  assets:
                    - url: 'https://assets.hosted.topsort.com/c049a46d834ab071cdde63e401d4efcd554e1a124f05c4ba9b3743fed2d43c4b/example-banner-2.jpeg'
                      role: image
                      contentType: image/jpeg
                      contentLength: 4505
                      width: 403
                      height: 125
                    - url: 'https://assets.hosted.topsort.com/db41a8b8b22c5ed9091f9f154b552b6bc1d1dbeb85059190f1c3b202977938f1/example-logo-2.png'
                      role: logo
                      contentType: image/png
                      contentLength: 34747
                      width: 140
                      height: 160
                  campaignId: 01934a6e-7bb3-79c1-89b3-134e2e3bf88e
              error: false

    SponsoredBrandWinner:
      type: object
      required:
        - rank
        - productId
        - resolvedBidId
        - assets
      properties:
        rank:
          type: integer
          format: int32
          description: >
            Where the product's bid ranked in the auction.
            One-based, so the product with rank 1 won the auction.
            In an auction response, the winners array is sorted so rank will match the entry's index.
          minimum: 1
        productId:
          type: string
          description: |-
            The marketplace's ID of the winning entity, depending on the target of the campaign.
          example: p_Mfk15
        resolvedBidId:
          type: string
          description: An opaque Topsort ID to be used when this item is interacted with.
          example: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
        title:
          type: string
          description: An optional title for the sponsored brand selected when creating the campaign.
        vendorId:
          type: string
          description: The ID of the vendor associated with this sponsored brand winner.
          example: v_8fj2D
        assets:
          description: Assets used to render the sponsored brand ad.
          type: array
          items:
            $ref: '#/components/schemas/SponsoredBrandAsset'
          minItems: 1

    SponsoredBrandAsset:
      type: object
      properties:
        url:
          type: string
          format: uri
          description: >
            A vendor provided asset that the marketplace has to render.
            The asset will be served by Topsort's CDN.
        role:
          type: string
          description: The role of the asset. It can be either `logo` or `image`.
        contentType:
          type: string
          description: The asset MIME type.
        contentLength:
          type: integer
          format: uint32
          description: The size of the asset in bytes.
        width:
          type: integer
          format: uint32
          description: The asset width in pixels.
        height:
          type: integer
          format: uint32
          description: The asset height in pixels.

    TravelAuctionRequest:
      description: Describes the intent of running a single auction.
      oneOf:
        - $ref: '#/components/schemas/HotelsAuctionRequest'
        - $ref: '#/components/schemas/FlightsAuctionRequest'

    HotelsAuctionRequest:
      type: object
      description: Describes the intent of running a hotel travel auction.
      required:
        - travelContext
      properties:
        type:
          type: string
          enum:
            - hotels
          description: Discriminator for the type of travel auction.
        slots:
          type: integer
          format: int32
          description: Specifies the maximum number of auction winners that should be returned.
        products:
          type: array
          description: An array of hotels products that should participate in the auction.
          items:
            $ref: '#/components/schemas/HotelsTravelProduct'
        travelContext:
          $ref: '#/components/schemas/HotelsTravelContext'

    HotelsTravelProduct:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: ID to identify hotel product.
          example: miami-hotel
        qualityScore:
          type: number
          minimum: 0
          maximum: 1
          exclusiveMinimum: true
          example: 0.75
          format: double
          description: |
            If given, this value will be combined with our internal quality
            score to provide a score that better represents the relevance of the
            participating products. If not given it will default to 1.
            Values must be between 0 and 1.

    BaseTravelContext:
      type: object
      required:
        - site
      properties:
        site:
          type: string
          minLength: 1
          maxLength: 64
          description: Web site requesting the auction
          example: argentina
        passengers:
          type: integer
          description: Number of passengers. Must not exceed 10.
          example: 3
        travelStartDate:
          type: string
          format: date
          description: RFC3339 formatted date representing the travel start point.
          example: '2009-01-01'
        travelEndDate:
          type: string
          format: date
          description: |
            RFC3339 formatted date representing the travel end point. Must be greater than start date.
          example: '2009-01-15'
        travelerType:
          type: string
          enum:
            - family
            - group
            - solo
            - couple
        pageName:
          type: string
          description: Page name e.g. "flights", "hotels", "package", ...
        platform:
          type: string
          description: Platform e.g. "app", "mobile", "web", ...

    HotelsTravelContext:
      allOf:
        - $ref: '#/components/schemas/BaseTravelContext'

    FlightsAuctionRequest:
      type: object
      description: Describes the intent of running a flight travel auction.
      required:
        - travelContext
      properties:
        type:
          type: string
          enum:
            - flights
          description: Discriminator for the type of travel auction.
        slots:
          type: integer
          format: int32
          description: Specifies the maximum number of auction winners that should be returned.
        products:
          type: array
          description: An array of flight products that should participate in the auction.
          items:
            $ref: '#/components/schemas/FlightsTravelProduct'
        travelContext:
          $ref: '#/components/schemas/FlightsTravelContext'

    FlightsTravelProduct:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: ID to identify flight product.
          example: L0_SAO-ORL
        variationID:
          type: string
          description: ID to identify flight product variation.
        price:
          type: number
          description: Flight product variation total price in marketplace currency.
        qualityScore:
          type: number
          minimum: 0
          maximum: 1
          exclusiveMinimum: true
          example: 0.75
          format: double
          description: |
            If given, this value will be combined with our internal quality
            score to provide a score that better represents the relevance of the
            participating products. If not given it will default to 1.
            Values must be between 0 and 1.

    FlightsTravelContext:
      allOf:
        - $ref: '#/components/schemas/BaseTravelContext'
        - type: object
          properties:
            route:
              type: string
              description: Flight route code.
            flightType:
              type: string
              description: Flight type e.g. "round_trip", "one_way", ...

    Error:
      type: object
      required:
        - errCode
      properties:
        errCode:
          type: string
          description: A short string uniquely identifying the problem.
          enum:
            - bad_request
            - empty_request
            - internal_server_error
            - invalid_api_key
            - invalid_auction_id
            - invalid_event_type
            - invalid_promotion_type
            - invalid_session
            - missing_auctions
            - missing_context
            - missing_placement
            - missing_product_id
            - missing_promotion_type
            - missing_purchased_at
            - missing_session
            - missing_slot_id
            - missing_slots
            - no_products
            - no_purchase_items
            - purchase_item_quantity_less_or_equal_than_zero
            - resolved_bid_id_not_found
            - too_few_impressions
            - too_few_slots
            - too_many_auctions
        docUrl:
          type: string
          format: uri
          description: A link to a documentation page providing more information about the error.
          example: https://docs.topsort.com/reference/errors
        message:
          type: string
          description: >
            Human-readable explanation of or details about the error.
            The string for a given error may change over time; code should not parse or dispatch based on particular values for this field.
    Placement:
      type: object
      required:
        - path
      additionalProperties: false
      properties:
        path:
          type: string
          description: |
            URL path of the page triggering the event.

            For web apps, this can be obtained in JS using `window.location.pathname`.

            For mobile apps, use the deep link for the current view, if available.
            Otherwise, encode the view from which the event occurred in your app as a path-like string (e.g. `/root/categories/:categoryId`).
          minLength: 1
          example: /categories/dairy
        position:
          type: integer
          description: >
            For components with multiple items
            (i.e. search results, similar products, etc),
            this should indicate the index of a given item within that list.
          minimum: 1
        page:
          type: integer
          description: >
            For paginated pages, this should indicate which page number triggered the event.
          minimum: 1
        pageSize:
          type: integer
          description: >
            For paginated pages this should indicate how many items are in each result page.
          minimum: 1
          example: 15
        productId:
          type: string
          description: >
            The ID of the product associated to the page in which this event occurred, if applicable.
            This ID must match the ID provided through the catalog service.
          minLength: 1
        categoryIds:
          type: array
          items:
            type: string
            minLength: 1
            uniqueItems: true
            description: A category ID.
          description: >
            An array of IDs of the categories associated to the page in which this event occurred, if applicable.
            These IDs must match the IDs provided through the catalog service.
          minItems: 1
        searchQuery:
          type: string
          description: >
            The search string provided by the user in the page where this event occurred, if applicable.
            This search string must match the searchQuery field that was provided in the auction request (if provided).
          minLength: 1
    Entity:
      type: object
      description: >
        `Entity` is meant for reporting organic events, not sponsored or promoted products. It refers to the object
        involved in the organic interaction. But, in most cases, you won't need to fill in this object. Be aware that
        if `resolvedBidId` has any value, `entity` will be disregarded.
      required:
        - id
        - type
      additionalProperties: false
      properties:
        id:
          type: string
          description: The marketplace's ID of the entity associated with the interaction.
          minLength: 1
        type:
          type: string
          description: The type of entity associated with the interaction.
          enum:
            - product
            - vendor
    EventsRequest:
      type: object
      additionalProperties: false
      properties:
        impressions:
          type: array
          items:
            $ref: '#/components/schemas/Impression'
          minItems: 1
          maxItems: 50
        clicks:
          type: array
          items:
            $ref: '#/components/schemas/Click'
          minItems: 1
          maxItems: 50
        purchases:
          type: array
          items:
            $ref: '#/components/schemas/Purchase'
          minItems: 1
          maxItems: 50
      minProperties: 1
      example:
        impressions:
          - id: eb874c98-bf4d-40a9-ae6d-fcf4cecb535c
            occurredAt: '2019-01-01T12:59:59-05:00'
            opaqueUserId: 71303ce0-de89-496d-8270-6434589615e8
            placement:
              path: /categories/dairy
              position: 1
              page: 1
              pageSize: 15
              categoryId: 9BLIe
            resolvedBidId: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
        clicks:
          - id: b39d39ed-ea0e-4059-9d15-4990b39c85a2
            occurredAt: '2019-01-01T13:01:42-05:00'
            opaqueUserId: 71303ce0-de89-496d-8270-6434589615e8
            placement:
              path: /categories/dairy
              position: 1
              page: 1
              pageSize: 15
              categoryId: 9BLIe
            resolvedBidId: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
        purchases:
          - id: 0e06c899-b2cd-4e0d-b0de-8aefb4b6d0a0
            items:
              - productId: p_SA0238
                unitPrice: 12.95
                quantity: 2
                vendorId: v_8fj2D
              - productId: p_oajf2D
                unitPrice: 1.49
            occurredAt: '2019-01-01T12:59:59-05:00'
            opaqueUserId: 71303ce0-de89-496d-8270-6434589615e8
    Impression:
      type: object
      description: >
        An impression means a promotable has become visible to the consumer.
        For promoted entities, include the `resolvedBidId` field from the `/v2/auctions` response.
        For unpromoted entities, include the `entity` field to describe what was seen.
        In case you cannot send an impression when the product becomes visible, send us an impression event when the product was rendered in the HTML or, if that's also not possible, when your API returns the results.
        It is important to select the most specific event so that your vendors have more accurate CTR metrics, which will allow them to better predict their campaigns.
      required:
        - occurredAt
        - opaqueUserId
        - id
      additionalProperties: false
      properties:
        resolvedBidId:
          type: string
          description: If the impression is over an ad promotion, this is the `resolvedBidId` field received from the `/auctions` request. In most situations, especially when reporting a sponsored interaction, you'll want to fill in this field.
          example: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
        entity:
          $ref: '#/components/schemas/Entity'
        placement:
          $ref: '#/components/schemas/Placement'
        occurredAt:
          type: string
          format: date-time
          description: RFC3339 formatted timestamp including UTC offset.
          example: '2009-01-01T12:59:59-05:00'
        opaqueUserId:
          $ref: '#/components/schemas/OpaqueUserID'
        id:
          type: string
          description: >
            The marketplace's unique ID for the impression.
            This field ensures the event reporting is idempotent in case there is a network issue and the request is retried.
            If there is no impression model on the marketplace side, generate a unique string that does not change if the event is resent.
          minLength: 1
          example: eb874c98-bf4d-40a9-ae6d-fcf4cecb535c
        additionalAttribution:
          description: >
            If the marketplace wants to attribute an impression to an additional entity, they can use
            the `additionalAttribution` field. When using this field, the `resolvedBidId` must also exist
            in the event body.
          $ref: '#/components/schemas/Entity'

    Click:
      description: >
        A click is sent to Topsort when the consumer has clicked on a promotable.
        For promoted entities, include the `resolvedBidId` field from the `/v2/auctions` response.
        For unpromoted entities, include the `entity` field to describe what was clicked.
        Topsort charges the vendor and pays the marketplace for clicks on ads in promoted placements on the marketplace app.
      type: object
      required:
        - occurredAt
        - opaqueUserId
        - id
      additionalProperties: false
      properties:
        resolvedBidId:
          type: string
          description: If the click is over an ad promotion, this is the `resolvedBidId` field received from the `/auctions` request. In most situations, especially when reporting a sponsored interaction, you'll want to fill in this field.
          example: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
        entity:
          $ref: '#/components/schemas/Entity'
        placement:
          $ref: '#/components/schemas/Placement'
        occurredAt:
          type: string
          format: date-time
          description: RFC3339 formatted timestamp including UTC offset.
          example: '2009-01-01T12:59:59-05:00'
        opaqueUserId:
          $ref: '#/components/schemas/OpaqueUserID'
        id:
          type: string
          description: >
            The marketplace's unique ID for the click.
            This field ensures the event reporting is idempotent in case there is a network issue and the request is retried.
            If there is no click model on the marketplace side, generate a unique string that does not change if the event is resent.
          minLength: 1
          example: b39d39ed-ea0e-4059-9d15-4990b39c85a2
        additionalAttribution:
          description: >
            If the marketplace wants to attribute a click to an additional entity, they can use
            the `additionalAttribution` field. When using this field, the `resolvedBidId` must also exist
            in the event body.
          $ref: '#/components/schemas/Entity'
    Purchase:
      description: >
        A purchase is sent to Topsort once a marketplace customer places an order.
        These events are used to measure the effectiveness of an ad campaign.
      type: object
      required:
        - occurredAt
        - opaqueUserId
        - items
        - id
      additionalProperties: false
      properties:
        occurredAt:
          type: string
          description: RFC3339 formatted timestamp, including UTC offset, of the instant in which the order was placed. Please note that purchases will NOT be attributed to an auction that happened after.
          example: '2021-10-12T07:20:50.52Z'
          format: date-time
        opaqueUserId:
          $ref: '#/components/schemas/OpaqueUserID'
        items:
          type: array
          description: Items purchased.
          minItems: 1
          items:
            $ref: '#/components/schemas/PurchaseItem'
        id:
          type: string
          description: >
            The marketplace unique ID for the order.
            This field ensures the event reporting is idempotent in case there is a network issue and the request is retried.
            If there is no unique ID for orders on the marketplace side, generate a unique string that does not change if the event needs to be resent.
          minLength: 1
          example: 0e06c899-b2cd-4e0d-b0de-8aefb4b6d0a0
    PurchaseItem:
      type: object
      required:
        - productId
        - unitPrice
      additionalProperties: false
      properties:
        productId:
          type: string
          description: The marketplace ID of the product being purchased.
          minLength: 1
          example: p_SA0238
        quantity:
          type: integer
          minimum: 1
          default: 1
          description: Count of products purchased.
          example: 2
        unitPrice:
          type: number
          format: double
          minimum: 0.0
          exclusiveMinimum: true
          description: The price of a single item in the marketplace currency.
          example: 12.95
        vendorId:
          type: string
          description: >
            The vendor ID of the product being purchased. This field is optional
            and should be filled in if 1. a product is sold by multiple vendors, or
            2. you want to use it for halo attribution
          minLength: 1
          example: v_8fj2D
    Pageview:
      type: object
      description: >
        A page view represents the navigation of the user throughout the page. They are considered organic events.
        In contrast to clicks or impressions, which are events within a page, a page view is the interaction with the full page, which can contain multiple objects.
      required:
        - occurredAt
        - opaqueUserId
        - id
        - page
      additionalProperties: false
      properties:
        page:
          $ref: '#/components/schemas/Page'
        occurredAt:
          type: string
          format: date-time
          description: RFC3339 formatted timestamp including UTC offset.
          example: '2009-01-01T12:59:59-05:00'
        opaqueUserId:
          $ref: '#/components/schemas/OpaqueUserID'
        id:
          type: string
          description: >
            The marketplace's unique ID for the event.
            This field ensures the event reporting is idempotent in case there is a network issue and the request is retried.
            If there is no pageview model on the marketplace side, generate a unique string that does not change if the event is resent.
          minLength: 1
          example: eb874c98-bf4d-40a9-ae6d-fcf4cecb535c

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
