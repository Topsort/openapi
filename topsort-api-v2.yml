openapi: 3.0.1
info:
  title: Topsort Endpoints v2 API Reference
  description: >-
    In order for a storefront to be able to run auctions in Topsort and report auction-related events back to Topsort,
    both the `/v2/auctions` and `/v2/events` endpoints must be integrated.
    Below are the endpoint and model definitions for each.
  contact:
    email: wicha@topsort.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: https://assets.topsort.com/Topsort_logo_icon_dark.svg
    backgroundColor: '#fff'
    altText: Topsort
  version: 2.0.0

servers:
  - url: https://api.topsort.com
    description: Base API URL

tags:
  - name: Auctions
    description: An auction determines which products should be promoted based on the vendors' bids.
  - name: Events
    description: |
      **The specification details, particularly around placement data, may change in the short term.**
      **If this is not acceptable for your integration, please use [Events V1](https://docs.topsort.com/reference/reportevent) as an alternative.**

      Significant consumer interactions on the marketplace app.
  - name: Toptimize
    description: |
      An out-of-the-box solution for prediction, ranking, retrieval, and other elements of ad selection.
  - name: Models
    x-displayName: All Models
    description: |
      ## AssetSource
      <SchemaDefinition schemaRef="#/components/schemas/AssetSource" />

      ## Auction (Banners)
      <SchemaDefinition schemaRef="#/components/schemas/BannersAuction" />

      ## Auction (Sponsored Listings)
      <SchemaDefinition schemaRef="#/components/schemas/SponsoredListingsAuction" />

      ## Auction Result (Banners)
      <SchemaDefinition schemaRef="#/components/schemas/BannersAuctionResult" />

      ## Auction Result (Sponsored Listings)
      <SchemaDefinition schemaRef="#/components/schemas/SponsoredListingsAuctionResult" />

      ## Category
      <SchemaDefinition schemaRef="#/components/schemas/Category" />

      ## Category Disjunction
      <SchemaDefinition schemaRef="#/components/schemas/CategoryDisjunction" />

      ## Click
      <SchemaDefinition schemaRef="#/components/schemas/Click" />

      ## Error
      <SchemaDefinition schemaRef="#/components/schemas/Error" />

      ## Events Request
      <SchemaDefinition schemaRef="#/components/schemas/EventsRequest" />

      ## Geotargeting
      <SchemaDefinition schemaRef="#/components/schemas/GeoTargeting" />

      ## Impression
      <SchemaDefinition schemaRef="#/components/schemas/Impression" />

      ## Products
      <SchemaDefinition schemaRef="#/components/schemas/Products" />

      ## Purchase
      <SchemaDefinition schemaRef="#/components/schemas/Purchase" />

      ## Purchase Item
      <SchemaDefinition schemaRef="#/components/schemas/PurchaseItem" />

      ## Winner (Banners)
      <SchemaDefinition schemaRef="#/components/schemas/BannersWinner" />

      ## Winner (Sponsored Listings)
      <SchemaDefinition schemaRef="#/components/schemas/SponsoredListingsWinner" />

      ## Page
      <SchemaDefinition schemaRef="#/components/schemas/Page" />

      ## RankingRequest
      <SchemaDefinition schemaRef="#/components/schemas/RankingRequest" />

      ## PredictionRequest
      <SchemaDefinition schemaRef="#/components/schemas/PredictionRequest" />

      ## RankingResult
      <SchemaDefinition schemaRef="#/components/schemas/RankingResult" />

      ## PredictionResult
      <SchemaDefinition schemaRef="#/components/schemas/PredictionResult" />

      ## RankingWinner
      <SchemaDefinition schemaRef="#/components/schemas/RankingWinner" />

      ## Interaction Object
      <SchemaDefinition schemaRef="#/components/schemas/InteractionObject" />
  - name: Offsite Ads API
    description: Offsite Ads API

security:
  - BearerAuth: []

paths:
  /v2/auctions:
    post:
      tags:
        - Auctions
      summary: Create auctions
      description: |
        Use the `/auctions` endpoint to create auctions. Each batch of auction requests can be a combination of 
        sponsored listing auctions and banner auctions. Each auction type has a unique body schemas.
      operationId: createAuctions
      requestBody:
        description: |
          The information describing what will be auctioned.
          Topsort will run an auction for each batched auction request, for which products' bids will compete against each other.
        content:
          application/json:
            schema:
              type: object
              properties:
                auctions:
                  type: array
                  items:
                    $ref: '#/components/schemas/AuctionRequest'
                  minItems: 1
                  maxItems: 5
              required:
                - auctions
              example:
                auctions:
                  - type: listings
                    slots: 1
                    category:
                      disjunctions:
                        - - c_large
                          - c_medium
                  - type: listings
                    slots: 2
                    products:
                      ids:
                        - p_PJbnN
                        - p_ojng4
                        - p_8VKDt
                        - p_Mfk15
                    geoTargeting:
                      location: New York
                  - type: banners
                    slots: 1
                    slotId: categories-ribbon-banner
                    category:
                      id: c_yogurt
                  - type: banners
                    slots: 1
                    slotId: homepage-banner
        required: true
      responses:
        201:
          description: >
            The auction results.
            The list of winners will contain at most `slots` entries per auction.
            It may contain fewer or no entries at all if there aren't enough products with usable bids, that is,
            a bid amount greater than the reserve price and belonging to a campaign with enough remaining budget.
            Bids become unusable if campaign budget is exhausted, the bid is disqualified to preserve spend pacing, etc.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuctionResult'
                    minItems: 1
                    maxItems: 5
                required:
                  - results
                example:
                  results:
                    - winners:
                        - rank: 1
                          type: product
                          id: p_Mfk11
                          resolvedBidId: WyJiX01mazExIiwiMTJhNTU4MjgtOGVhZC00Mjk5LTMyNjYtY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0==
                          campaignId: 82588593-85c5-47c0-b125-07e315b7f2b3
                      error: false
                    - winners:
                        - rank: 1
                          type: product
                          id: p_Mfk15
                          resolvedBidId: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
                          campaignId: 4bcc6093-f367-4df2-aa1b-7c1674dd6441
                        - rank: 2
                          type: product
                          id: p_PJbnN
                          resolvedBidId: WyJlX1BKYm5OIiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
                          campaignId: a72e4e43-55b5-4d08-81bb-cbb57df59c72
                      error: false
                    - winners:
                        - rank: 1
                          type: product
                          id: p_PJbnN
                          resolvedBidId: WyJlX1BKYm5OIiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwiYmFubmVyQWRzIiwiZGVmYXVsdCIsIiJd
                          campaignId: 1156ef4e-0109-4190-ac97-4436c82358d2
                          asset:
                            - url: https://topsort.cdnprovider.com/lhs-banner-image-for-p_PJbnN-1x.png
                      error: false
                    - winners: []
                      error: false
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /v2/auctions/sponsored-brand:
    post:
      tags:
        - Auctions
      summary: Create sponsored brand auctions
      operationId: createSponsoredBrandAuctions
      requestBody:
        description: |
          The information describing what will be auctioned.
          Topsort will run an auction for each batched auction request, for which products bids will compete against each other.
        content:
          application/json:
            schema:
              type: object
              properties:
                auctions:
                  type: array
                  items:
                    $ref: '#/components/schemas/SponsoredBrandAuctionRequest'
                  minItems: 1
                  maxItems: 5
              required:
                - auctions
        required: true
      responses:
        201:
          description: >
            The auction results.
            The list of winners will contain at most `winners` entries per auction.
            It may contain fewer or no entries at all if there aren't enough products with usable bids, that is,
            a bid amount greater than the reserve price and belonging to a campaign with enough remaining budget.
            Bids become unusable if campaign budget is exhausted, the bid is disqualified to preserve spend pacing, etc.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/SponsoredBrandAuctionResult'
                    minItems: 1
                    maxItems: 5
                required:
                  - results
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /v2/auctions/travel:
    post:
      tags:
        - Auctions
      summary: Create travel auctions
      description:
        Use the `/auctions/travel` endpoint to create batch auctions for sponsored travel listings. We support
        two types of sponsored travel listings, hotels and flights. Each batch of auction requests can be a combination
        of sponsored hotel and flight listing auctions. Each auction type has a unique body schemas.
      operationId: createTravelAuctions
      requestBody:
        description: |
          The information describing what will be auctioned.
          Topsort will run an auction for each batched auction request, for which travel products' bids will compete 
          against each other.
        content:
          application/json:
            schema:
              type: object
              properties:
                auctions:
                  type: array
                  items:
                    $ref: '#/components/schemas/TravelAuctionRequest'
                  minItems: 1
                  maxItems: 5
              required:
                - auctions
              example:
                auctions:
                  - type: hotels
                    slots: 2
                    products:
                      - id: hotel-1
                        qualityScore: 0.7
                      - id: hotel-2
                    travelContext:
                      travelStartDate: 2025-01-01
                      travelEndDate: 2025-01-15
                      site: argentina
                      passengers: 2
                      travelerType: couple
                  - type: flights
                    slots: 2
                    products:
                      - id: 'L0_SAO-ORL'
                        variationID: '001'
                        price: 1500
                        qualityScore: 0.7
                      - id: 'L0_SAO-ORL'
                        variationID: '002'
                        price: 2000
                    travelContext:
                      site: argentina
                      passengers: 2
                      route: SAO-ORL
                      flightType: one-way
        required: true
      responses:
        201:
          description: >
            The auction results.
            The list of winners will contain at most `winners` entries per auction.
            It may contain fewer or no entries at all if there aren't enough products with usable bids, that is,
            a bid amount greater than the reserve price and belonging to a campaign with enough remaining budget.
            Bids become unusable if campaign budget is exhausted, the bid is disqualified to preserve spend pacing, etc.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/TravelAuctionResult'
                    minItems: 1
                    maxItems: 5
                required:
                  - results
                example:
                  - results:
                      - resultType: hotels
                        winners:
                          - rank: 1
                            id: hotel-1
                            resolvedBidId: ChAHd-K97Xs8MNRELdY9VCeJFiBCk1_aEYz8eb-WZqyhzL4EFhBCk5Mt_X2_b8Yu_vXJgzPWJhVLBTFRBTGssk9
                            campaignId: 8b816367-da17-4c65-9a26-391edf01a10d
                          - rank: 2
                            id: hotel-2
                            resolvedBidId: ChAJe-M23Yr5QPTEFdX7VBgJGhCDm2_wDXy6cb-XZpxjxK6GHhCDm3Ku_W1_c9Zw_wYHfzQYKjTLBVGQBTLttu6
                            campaignId: 7be0d8c8-243c-41af-bb43-b43ef4935672
                      - resultType: flights
                        winners:
                          - rank: 1
                            id: L0_SAO-ORL
                            resolvedBidId: ChAKf-N45Vq3LOTEGcW9VDhKHjADk3_zCXx8db-XZsyiwM2HIjADk4Lr_X0_b9Xw_uKHgyRZKhUKCTHQCTHrrh7
                            campaignId: 8ab7b29e-1934-4ec9-ad87-60c285bc7f38
                            variationID: '002'
                          - rank: 2
                            id: L0_SAO-ORL
                            resolvedBidId: ChAGg-P56Wu4MRUEHdX8VEfLHkBEk4_aEXz9fb-YZtxjwN3IJkBEk5Ms_W2_c8Yx_vZJhzSXKlVLDUJQDUJssl8
                            campaignId: cb8ed0a7-0ecf-4ffb-a863-022f862649ec
                            variationID: '001'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /v2/events:
    post:
      tags:
        - Events
      summary: Report events
      description: |
        Use the `/events` endpoint to report user interactions and activity in on a marketplace:
        - **Impressions** — a user viewed an asset.
        - **Clicks** — a user clicked on an asset.
        - **Purchases** — a user created an order.
        - **Pageviews** — a user visited a page.

        Interactions require either a `resolvedBidId`, for sponsored events coming from the `/v2/auctions` response,
        or an `entity` that describes the entity that was interacted with, in the case of organic or non-sponsored events.

        For analytics purposes, you can use the `placement` field to differentiate different listings or banners.
        For example, on a product page with a carousel of products, you can track impressions and clicks related to the carousel
        by including `/carousel` at the end of the `path` field in the `placement` object. This allows you to monitor
        the performance of carousel products in the [Data Room](https://docs.topsort.com/knowledge-base/analytics/data-room/).

      operationId: reportEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventsRequest'
        required: true
      responses:
        204:
          description: All events were reported successfully.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        400:
          $ref: '#/components/responses/BadRequest'
  /v2/events/beta/link-users:
    post:
      tags:
        - Events
      summary: '[Beta] Report Link Users'
      description: |
        Use the `/events/beta/link-users` endpoint to report to Topsort linked opaque user IDs.

        This endpoint allows linking two opaque user IDs for attribution purposes. The `from` field represents the 
        original opaque user ID, and the `to` field represents the target opaque user ID to be linked. The request 
        will fail if the `from` and `to` opaque user IDs are the same.

        Contact your sales representative to gain access to this endpoint and start using it.
      x-beta: 'true'
      operationId: linkUsers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                from:
                  type: string
                  description: The opaque user ID of the original user account.
                  minLength: 1
                  maxLength: 64
                to:
                  type: string
                  description: The opaque user ID of the target user account to be linked.
                  minLength: 1
                  maxLength: 64
              required:
                - from
                - to
              example:
                from: 'user123'
                to: 'user456'
        required: true
      responses:
        204:
          description: Users account link was reported successfully.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        400:
          $ref: '#/components/responses/BadRequest'
  /toptimize/v1/rank:
    post:
      tags:
        - Toptimize
      summary: '[Beta] Rank objects'
      operationId: createRanking
      description: |
        > ⚠️ **Beta Access Required**

        > Contact your sales representative to gain access to this endpoint and start using it.

        Use the `/ranking` endpoint to re-rank objects to show on a page. This endpoint can retrieve sponsored
        and non-sonsored objects and rank them together, according to an appropriate context and behavior information.
      requestBody:
        description: |
          The context information to get the ranking, to rank organic and sponsored products.

        x-beta: 'true'
        content:
          application/json:
            schema:
              type: object
              properties:
                ranking:
                  type: array
                  items:
                    $ref: '#/components/schemas/RankingRequest'
                  minItems: 1
                  maxItems: 5
              required:
                - ranking
              example:
                ranking:
                  - type: listings
                    slots: 3
                    pageSize: 3
                    category:
                      ids: ['sneakers', 'shoes']
                    products:
                      ids: ['p_PJbnN', 'p_ojng4']
        required: true
      responses:
        201:
          description: >
            The ranking results.
            The list of winners will contain at most `slots` entries per auction.
            It may contain fewer or no entries at all if there aren't enough products to fill the slots.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankingResult'
                    minItems: 1
                    maxItems: 5
                required:
                  - results
                example:
                  results:
                    - products:
                        - rank: 1
                          type: organic
                          id: p_Mfk11
                          resolvedItemId: WyJiX01mazExIiwiMTJhNTU4MjgtOGVhZC00Mjk5LTMyNjYtY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0==
                        - rank: 2
                          type: sponsored
                          id: p_Mfk15
                          resolvedItemId: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
                        - rank: 3
                          type: organic
                          id: p_PJbnN
                          resolvedItemId: WyJlX1BKYm5OIiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
                      error: false
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /v2/offsite-ads/advertisers:
    post:
      operationId: create_offsite_advertiser_public
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAdvertiserRequestPublic'
        required: true
      responses:
        '201':
          description: Advertiser already exists
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponseBase'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: '[BETA] Create a new advertiser'
      tags:
        - Offsite Ads API
  /v2/offsite-ads/advertisers/{id}:
    get:
      operationId: get_offsite_advertiser_public
      parameters:
        - description: The advertiser ID
          in: path
          name: id
          required: true
          schema:
            description: The advertiser ID
            title: Id
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicAdvertiserResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: '[BETA] Get advertiser details'
      tags:
        - Offsite Ads API
  /v2/offsite-ads/audiences:
    get:
      operationId: list_offsite_audiences_public
      parameters:
        - description: Filter by DSPs
          in: query
          name: dsps
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PublicDSP'
            description: Filter by DSPs
            title: Dsps
        - description:
            Pagination cursor as provided in an earlier response. If provided
            will fetch the next page of results.
          in: query
          name: next_page
          required: false
          schema:
            type: string
            description:
              Pagination cursor as provided in an earlier response. If provided
              will fetch the next page of results.
            title: Next Page
        - description: The maximum number of items to return per page.
          in: query
          name: limit
          required: false
          schema:
            default: 50
            description: The maximum number of items to return per page.
            maximum: 100
            minimum: 1
            title: Limit
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAudiencesResponsePublic'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: '[BETA] List all audiences'
      tags:
        - Offsite Ads API
    post:
      operationId: create_offsite_audience_public
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAudienceRequestPublic'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponseBase'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: '[BETA] Create a new audience'
      tags:
        - Offsite Ads API
  /v2/offsite-ads/audiences/{audience_id}/users:
    post:
      operationId: upload_audience_users_public
      parameters:
        - description: The audience ID
          in: path
          name: audience_id
          required: true
          schema:
            description: The audience ID
            format: uuid
            title: Audience Id
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_upload_audience_users_public'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponseBase'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: '[BETA] Upload users to an audience'
      tags:
        - Offsite Ads API
  /v2/offsite-ads/campaigns:
    get:
      operationId: list_offsite_campaigns_public
      parameters:
        - description: Filter by DSPs.
          in: query
          name: dsps
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PublicDSP'
            description: Filter by DSPs.
            title: Dsps
        - description: Filter by campaign status.
          in: query
          name: status
          required: false
          schema:
            $ref: '#/components/schemas/Status'
        - description:
            Pagination cursor as provided in an earlier response. If provided
            will fetch the next page of results.
          in: query
          name: next_page
          required: false
          schema:
            type: string
            description:
              Pagination cursor as provided in an earlier response. If provided
              will fetch the next page of results.
            title: Next Page
        - description: The maximum number of items to return per page.
          in: query
          name: limit
          required: false
          schema:
            default: 50
            description: The maximum number of items to return per page.
            maximum: 100
            minimum: 1
            title: Limit
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCampaignsResponsePublic'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: '[BETA] List all campaigns'
      tags:
        - Offsite Ads API
    post:
      operationId: create_offsite_campaign_public
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCampaignRequestPublic'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponseBase'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: '[BETA] Create a new campaign'
      tags:
        - Offsite Ads API
  /v2/offsite-ads/campaigns/{campaign_id}:
    get:
      operationId: get_offsite_campaign_public
      parameters:
        - description: The unique identifier of the campaign.
          in: path
          name: campaign_id
          required: true
          schema:
            description: The unique identifier of the campaign.
            format: uuid
            title: Campaign Id
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignResponsePublic'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: '[BETA] Get campaign details'
      tags:
        - Offsite Ads API
    patch:
      operationId: update_offsite_campaign_public
      parameters:
        - description: The unique identifier of the campaign.
          in: path
          name: campaign_id
          required: true
          schema:
            description: The unique identifier of the campaign.
            format: uuid
            title: Campaign Id
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCampaignRequestPublic'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponseBase'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: '[BETA] Update campaign settings'
      tags:
        - Offsite Ads API
  /v2/offsite-ads/campaigns/{campaign_id}/geotargeting:
    get:
      operationId: get_offsite_campaign_geotargeting_public
      parameters:
        - description: The unique identifier of the campaign.
          in: path
          name: campaign_id
          required: true
          schema:
            description: The unique identifier of the campaign.
            format: uuid
            title: Campaign Id
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignGeoTargetingResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: '[BETA] Get campaign geotargeting settings'
      tags:
        - Offsite Ads API
  /v2/offsite-ads/jobs/{job_id}:
    get:
      operationId: get_offsite_job_status_public
      parameters:
        - description: The unique identifier for the queued job.
          in: path
          name: job_id
          required: true
          schema:
            description: The unique identifier for the queued job.
            format: uuid
            title: Job Id
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDetailsResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: '[BETA] Get Job Status'
      tags:
        - Offsite Ads API
  /v2/offsite-ads/reporting/campaigns/{campaign_id}:
    get:
      operationId: get_offsite_summary_report_public
      parameters:
        - description: The unique identifier of the campaign.
          in: path
          name: campaign_id
          required: true
          schema:
            description: The unique identifier of the campaign.
            format: uuid
            title: Campaign Id
            type: string
        - description: Start date for the report.
          in: query
          name: start_date
          required: true
          schema:
            description: Start date for the report.
            format: date
            title: Start Date
            type: string
        - description: End date for the report.
          in: query
          name: end_date
          required: true
          schema:
            description: End date for the report.
            format: date
            title: End Date
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportData'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: '[BETA] Get campaign performance summary'
      tags:
        - Offsite Ads API
  /v2/offsite-ads/reporting/campaigns/{campaign_id}/daily:
    get:
      operationId: get_offsite_daily_report_public
      parameters:
        - description: The unique identifier of the campaign.
          in: path
          name: campaign_id
          required: true
          schema:
            description: The unique identifier of the campaign.
            format: uuid
            title: Campaign Id
            type: string
        - description: Start date for the report.
          in: query
          name: start_date
          required: true
          schema:
            description: Start date for the report.
            format: date
            title: Start Date
            type: string
        - description: End date for the report.
          in: query
          name: end_date
          required: true
          schema:
            description: End date for the report.
            format: date
            title: End Date
            type: string
        - description:
            Pagination cursor as provided in an earlier response. If provided
            will fetch the next page of results.
          in: query
          name: next_page
          required: false
          schema:
            type: string
            description:
              Pagination cursor as provided in an earlier response. If provided
              will fetch the next page of results.
            title: Next Page
        - description: The maximum number of items to return per page.
          in: query
          name: limit
          required: false
          schema:
            default: 50
            description: The maximum number of items to return per page.
            maximum: 100
            minimum: 1
            title: Limit
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyReportResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: '[BETA] Get daily campaign performance report'
      tags:
        - Offsite Ads API
  /v2/offsite-ads/reporting/campaigns/{campaign_id}/products:
    get:
      operationId: get_offsite_product_report_public
      parameters:
        - description: The unique identifier of the campaign.
          in: path
          name: campaign_id
          required: true
          schema:
            description: The unique identifier of the campaign.
            format: uuid
            title: Campaign Id
            type: string
        - description: Start date for the report.
          in: query
          name: start_date
          required: true
          schema:
            description: Start date for the report.
            format: date
            title: Start Date
            type: string
        - description: End date for the report.
          in: query
          name: end_date
          required: true
          schema:
            description: End date for the report.
            format: date
            title: End Date
            type: string
        - description:
            Pagination cursor as provided in an earlier response. If provided
            will fetch the next page of results.
          in: query
          name: next_page
          required: false
          schema:
            type: string
            description:
              Pagination cursor as provided in an earlier response. If provided
              will fetch the next page of results.
            title: Next Page
        - description: The maximum number of items to return per page.
          in: query
          name: limit
          required: false
          schema:
            default: 50
            description: The maximum number of items to return per page.
            maximum: 100
            minimum: 1
            title: Limit
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicProductReportResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: '[BETA] Get product-level campaign performance report'
      tags:
        - Offsite Ads API

  /toptimize/v1/predictions:
    post:
      tags:
        - Toptimize
      summary: '[Beta] Add Quality Score'
      description: |
        Use the `/predictions` endpoint to get contextual predictions of conversion and relevance metrics,
        which are personalized by user and context. 

        In order to provide predictions, Topsort requires that events are also sent, as a source of
        information.
      operationId: getPredictions
      requestBody:
        description: |
          > ⚠️ **Beta Access Required**

          > Contact your sales representative to gain access to this endpoint and start using it.

          The context information for the predictions, including which metrics to predict.
        x-beta: 'true'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PredictionRequest'
            example:
              metrics:
                ctr: true
              opaqueUserId: 'u_9ske45'
              productIds: ['p_PJbnN', 'p_ojng4']
        required: true
      responses:
        200:
          description: >
            The prediction results. This will provide a numerical value for each combination of metric/product
            requested on the API call.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictionResult'
              example:
                objectType: 'listing'
                predictions:
                  - productId: 'p_PJbnN'
                    ctr: 0.03
                  - productId: 'p_ojng4'
                    ctr: 0.056
                error: false
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /toptimize/v1/retrieval:
    post:
      tags:
        - Toptimize
      summary: '[Beta] Retrieve objects'
      description: |
        > ⚠️ **Beta Access Required**

        > Contact your sales representative to gain access to this endpoint and start using it.

        Use the `/retrieval` endpoint to get recommendations of which products are relevant given a
        certain context. Context is provided by user information, plus seed products. This can be used
        to retrieve object to display on a PDP (single seed product) or in a cart (multiple seed products).

        In order to provide retrieval, Topsort requires that events are also sent, as a source of
        information.
      operationId: retrieveObjects
      requestBody:
        description: |
          The context information for the predictions, including which metrics to predict.
        x-beta: 'true'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetrievalRequest'
            example:
              slots: 5
              opaqueUserId: 'u_9ske45'
              seedProductIds: ['p_PJbnN', 'p_ojng4']
              mode: all
              deviceType: mobile
        required: true
      responses:
        200:
          description: >
            The retrieval results. Each retrieved products is accompanied by their relevancy score.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrievalResults'
              example:
                objectType: 'listing'
                objects:
                  - id: 'p_xh90s'
                    value: 0.978
                  - id: 'p_12lp0'
                    value: 0.953
                  - id: 'p_ds7ui'
                    value: 0.877
                error: false
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /toptimize/v1/forecasting/marketplace:
    get:
      tags:
        - Toptimize
      summary: '[Beta] Marketplace-level forecasts'
      description: |
        > ⚠️ **Beta Access Required**

        > Contact your sales representative to gain access to this endpoint and start using it.

        Use the `/forecasting/marketplace` endpoint to get marketplace-level forecasts for various metrics like
        auctions, impressions, clicks, and capacity usage. The forecast provides predictions for future performance
        based on historical data.

        This endpoint returns daily forecasts for a specified time window, with each forecast including a central
        prediction value and a confidence interval.
      operationId: getMarketplaceForecast
      parameters:
        - name: time_window
          in: query
          description: Number of days to forecast into the future. Maximum 14 days.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 14
            default: 7
      responses:
        200:
          description: >
            The marketplace-level forecast results.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DailyForecast'
              example:
                - forecastDate: '2025-07-15'
                  metrics:
                    - metricName: 'total_auctions'
                      values:
                        forecastValue: 15000
                        forecastIntervalMin: 14200
                        forecastIntervalMax: 15800
                    - metricName: 'total_impressions'
                      values:
                        forecastValue: 45000
                        forecastIntervalMin: 42500
                        forecastIntervalMax: 47500
                    - metricName: 'total_winners'
                      values:
                        forecastValue: 12500
                        forecastIntervalMin: 11800
                        forecastIntervalMax: 13200
                    - metricName: 'total_clicks'
                      values:
                        forecastValue: 5000
                        forecastIntervalMin: 4700
                        forecastIntervalMax: 5300
                    - metricName: 'total_capacity'
                      values:
                        forecastValue: 20000
                        forecastIntervalMin: 19000
                        forecastIntervalMax: 21000
                    - metricName: 'occupied_capacity'
                      values:
                        forecastValue: 15000
                        forecastIntervalMin: 14200
                        forecastIntervalMax: 15800
                    - metricName: 'slot_occupancy'
                      values:
                        forecastValue: 0.75
                        forecastIntervalMin: 0.71
                        forecastIntervalMax: 0.79
                - forecastDate: '2025-07-16'
                  metrics:
                    - metricName: 'total_auctions'
                      values:
                        forecastValue: 16200
                        forecastIntervalMin: 15300
                        forecastIntervalMax: 17100
                    - metricName: 'total_impressions'
                      values:
                        forecastValue: 48600
                        forecastIntervalMin: 45900
                        forecastIntervalMax: 51300
                    - metricName: 'total_winners'
                      values:
                        forecastValue: 13500
                        forecastIntervalMin: 12700
                        forecastIntervalMax: 14300
                    - metricName: 'total_clicks'
                      values:
                        forecastValue: 5400
                        forecastIntervalMin: 5100
                        forecastIntervalMax: 5700
                    - metricName: 'total_capacity'
                      values:
                        forecastValue: 21000
                        forecastIntervalMin: 19900
                        forecastIntervalMax: 22100
                    - metricName: 'occupied_capacity'
                      values:
                        forecastValue: 16200
                        forecastIntervalMin: 15300
                        forecastIntervalMax: 17100
                    - metricName: 'slot_occupancy'
                      values:
                        forecastValue: 0.77
                        forecastIntervalMin: 0.73
                        forecastIntervalMax: 0.81
        404:
          description: Marketplace is not available for forecasting (e.g., not enough data).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /toptimize/v1/forecasting/inventory:
    post:
      tags:
        - Toptimize
      summary: '[Beta] Inventory-level forecasts'
      description: |
        > ⚠️ **Beta Access Required**

        > Contact your sales representative to gain access to this endpoint and start using it.

        Use the `/forecasting/inventory` endpoint to get detailed forecasts for specific inventory types and values.
        This can help identify performance patterns across different triggers like category or search terms.

        This endpoint returns daily forecasts for each requested inventory item over the specified time window,
        with each forecast including a central prediction value and a confidence interval.
      operationId: getInventoryForecast
      requestBody:
        description: The inventory types and values to forecast, along with the desired time window.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                inventory:
                  type: array
                  description: List of inventory items to forecast.
                  items:
                    type: object
                    required:
                      - inventoryType
                      - inventoryValue
                    properties:
                      inventoryType:
                        type: string
                        description: Type of inventory (e.g., "category", "search").
                        example: 'category'
                        enum:
                          - category
                          - search
                      inventoryValue:
                        type: string
                        description: Value of the inventory (category ID or search term).
                        example: 'electronics'
                timeWindow:
                  type: integer
                  description: Number of days to forecast into the future. Maximum 14 days.
                  minimum: 1
                  maximum: 14
                  default: 7
              required:
                - inventory
            example:
              inventory:
                - inventoryType: 'category'
                  inventoryValue: 'electronics'
                - inventoryType: 'search'
                  inventoryValue: 'coffee'
              timeWindow: 7
      responses:
        200:
          description: >
            The inventory-specific forecast results.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryForecast'
              example:
                - inventoryType: 'category'
                  inventoryValue: 'electronics'
                  dailyForecasts:
                    - forecastDate: '2025-08-01'
                      metrics:
                        - metricName: 'total_auctions'
                          values:
                            forecastValue: 1000
                            forecastIntervalMin: 900
                            forecastIntervalMax: 1100
                        - metricName: 'total_impressions'
                          values:
                            forecastValue: 2000
                            forecastIntervalMin: 1800
                            forecastIntervalMax: 2200
                        - metricName: 'total_winners'
                          values:
                            forecastValue: 500
                            forecastIntervalMin: 450
                            forecastIntervalMax: 550
                        - metricName: 'total_clicks'
                          values:
                            forecastValue: 100
                            forecastIntervalMin: 90
                            forecastIntervalMax: 110
                        - metricName: 'expected_total_capacity'
                          values:
                            forecastValue: 5000
                            forecastIntervalMin: 4500
                            forecastIntervalMax: 5500
                        - metricName: 'expected_occupied_capacity'
                          values:
                            forecastValue: 2000
                            forecastIntervalMin: 1800
                            forecastIntervalMax: 2200
                        - metricName: 'slot_occupancy'
                          values:
                            forecastValue: 0.4
                            forecastIntervalMin: 0.36
                            forecastIntervalMax: 0.44
                    - forecastDate: '2025-08-02'
                      metrics:
                        - metricName: 'total_auctions'
                          values:
                            forecastValue: 1100
                            forecastIntervalMin: 1000
                            forecastIntervalMax: 1200
                        - metricName: 'total_impressions'
                          values:
                            forecastValue: 2200
                            forecastIntervalMin: 2000
                            forecastIntervalMax: 2400
                        - metricName: 'total_winners'
                          values:
                            forecastValue: 550
                            forecastIntervalMin: 500
                            forecastIntervalMax: 600
                        - metricName: 'total_clicks'
                          values:
                            forecastValue: 110
                            forecastIntervalMin: 100
                            forecastIntervalMax: 120
                        - metricName: 'total_capacity'
                          values:
                            forecastValue: 5500
                            forecastIntervalMin: 5000
                            forecastIntervalMax: 6000
                        - metricName: 'occupied_capacity'
                          values:
                            forecastValue: 2200
                            forecastIntervalMin: 2000
                            forecastIntervalMax: 2400
                        - metricName: 'slot_occupancy'
                          values:
                            forecastValue: 0.4
                            forecastIntervalMin: 0.36
                            forecastIntervalMax: 0.44
                - inventoryType: 'search'
                  inventoryValue: 'coffee'
                  dailyForecasts:
                    - forecastDate: '2025-08-01'
                      metrics:
                        - metricName: 'total_auctions'
                          values:
                            forecastValue: 500
                            forecastIntervalMin: 450
                            forecastIntervalMax: 550
                        - metricName: 'total_impressions'
                          values:
                            forecastValue: 1000
                            forecastIntervalMin: 900
                            forecastIntervalMax: 1100
                        - metricName: 'total_winners'
                          values:
                            forecastValue: 250
                            forecastIntervalMin: 200
                            forecastIntervalMax: 300
                        - metricName: 'total_clicks'
                          values:
                            forecastValue: 50
                            forecastIntervalMin: 40
                            forecastIntervalMax: 60
                        - metricName: 'total_capacity'
                          values:
                            forecastValue: 2500
                            forecastIntervalMin: 2250
                            forecastIntervalMax: 2750
                        - metricName: 'occupied_capacity'
                          values:
                            forecastValue: 1000
                            forecastIntervalMin: 900
                            forecastIntervalMax: 1100
                        - metricName: 'slot_occupancy'
                          values:
                            forecastValue: 0.4
                            forecastIntervalMin: 0.36
                            forecastIntervalMax: 0.44
                    - forecastDate: '2025-08-02'
                      metrics:
                        - metricName: 'total_auctions'
                          values:
                            forecastValue: 550
                            forecastIntervalMin: 500
                            forecastIntervalMax: 600
                        - metricName: 'total_impressions'
                          values:
                            forecastValue: 1100
                            forecastIntervalMin: 1000
                            forecastIntervalMax: 1200
                        - metricName: 'total_winners'
                          values:
                            forecastValue: 275
                            forecastIntervalMin: 250
                            forecastIntervalMax: 300
                        - metricName: 'total_clicks'
                          values:
                            forecastValue: 55
                            forecastIntervalMin: 50
                            forecastIntervalMax: 60
                        - metricName: 'total_capacity'
                          values:
                            forecastValue: 2750
                            forecastIntervalMin: 2500
                            forecastIntervalMax: 3000
                        - metricName: 'occupied_capacity'
                          values:
                            forecastValue: 1100
                            forecastIntervalMin: 1000
                            forecastIntervalMax: 1200
                        - metricName: 'slot_occupancy'
                          values:
                            forecastValue: 0.4
                            forecastIntervalMin: 0.36
                            forecastIntervalMax: 0.44
        204:
          description: The request was successful, but none of the triggers have enough data to be forecasted
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Marketplace is not available for forecasting (e.g., not enough data)
  /toptimize/v1/forecasting/campaign:
    post:
      tags:
        - Toptimize
      summary: '[Beta] Campaign performance forecasts'
      description: |
        > ⚠️ **Beta Access Required**

        > Contact your sales representative to gain access to this endpoint and start using it.

        Use the `/forecasting/campaign` endpoint to predict the performance of a potential campaign based on
        its settings like budget, target ROAS, and targeted inventory.

        This endpoint returns daily forecasts for key campaign metrics over the specified time window,
        with each forecast including a central prediction value and a confidence interval.
      operationId: getCampaignForecast
      requestBody:
        description: The campaign settings to use for forecasting.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - timeWindow
                - targetRoas
                - budget
                - campaignType
                - bids
              properties:
                timeWindow:
                  type: integer
                  description: Number of days to forecast into the future. Maximum 14 days.
                  minimum: 1
                  maximum: 14
                targetRoas:
                  type: number
                  description: Target Return on Ad Spend for the campaign.
                  format: float
                  example: 3.5
                budget:
                  type: object
                  required:
                    - amount
                    - type
                  properties:
                    amount:
                      type: number
                      description: Budget amount in the marketplace's currency.
                      format: float
                      example: 1000
                    type:
                      type: string
                      description: Budget time frame.
                      enum: [daily, weekly, monthly]
                      example: 'daily'
                campaignType:
                  type: string
                  description: Type of campaign. For v1, only "autobidding" is supported.
                  enum: [autobidding]
                  example: 'autobidding'
                bids:
                  type: object
                  required:
                    - productIds
                    - inventory
                  properties:
                    productIds:
                      type: array
                      description: List of product IDs to include in the campaign.
                      items:
                        type: string
                      example: ['p_1234', 'p_5678']
                    inventory:
                      type: array
                      description: List of inventory items to target for the campaign.
                      items:
                        type: object
                        required:
                          - inventoryType
                          - inventoryValue
                        properties:
                          inventoryType:
                            type: string
                            description: Type of inventory to target (e.g., "category", "search").
                            example: 'category'
                            enum:
                              - category
                              - search
                          inventoryValue:
                            type: string
                            description: Value of the inventory to target.
                            example: 'electronics'
            example:
              timeWindow: 7
              targetRoas: 3.5
              budget:
                amount: 1000
                type: 'daily'
              campaignType: 'autobidding'
              bids:
                productIds: ['p_1234', 'p_5678']
                inventory:
                  - inventoryType: 'category'
                    inventoryValue: 'electronics'
                  - inventoryType: 'category'
                    inventoryValue: 'computers'
      responses:
        200:
          description: >
            The forecast results for the campaign over each day in the requested time window.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DailyForecast'
              example:
                - forecastDate: '2025-07-15'
                  metrics:
                    - metricName: 'total_impressions'
                      values:
                        forecastValue: 12000
                        forecastIntervalMin: 11000
                        forecastIntervalMax: 13000

                    - metricName: 'total_clicks'
                      values:
                        forecastValue: 360
                        forecastIntervalMin: 320
                        forecastIntervalMax: 400
                    - metricName: 'total_purchases'
                      values:
                        forecastValue: 45
                        forecastIntervalMin: 38
                        forecastIntervalMax: 52
                - forecastDate: '2025-07-16'
                  metrics:
                    - metricName: 'total_impressions'
                      values:
                        forecastValue: 13000
                        forecastIntervalMin: 12000
                        forecastIntervalMax: 14000
                    - metricName: 'total_clicks'
                      values:
                        forecastValue: 390
                        forecastIntervalMin: 350
                        forecastIntervalMax: 430
                    - metricName: 'purchases'
                      values:
                        forecastValue: 48
                        forecastIntervalMin: 42
                        forecastIntervalMax: 54
        204:
          description: The request was successful, but the campaign targets don't have enough data to be forecasted.
        404:
          description: Marketplace is not available for forecasting (e.g., not enough data).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'

components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    BadRequest:
      description: HTTP status codes as registered with IANA.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Category:
      oneOf:
        - $ref: '#/components/schemas/SingleCategory'
        - type: object
          title: Multiple Categories
          description: A set of categories for the purpose of running an auction.
          required:
            - ids
          properties:
            ids:
              type: array
              description: |
                An array containing the category IDs of the bids that will participate in an auction.
                In order to participate in an auction, a bid product must belong to **all** of the categories provided in the auction request.
              items:
                type: string
                description: A category ID.
                minLength: 1
              minItems: 1
              example:
                - c_men_clothing
                - c_shoes
        - type: object
          title: Category Disjunctions
          description: Multiple disjunctions of categories for the purpose of running an auction.
          required:
            - disjunctions
          properties:
            disjunctions:
              type: array
              description: |
                An array of disjunctions.

                In order to participate in an auction, a bid product must belong to at least one of the categories of the disjunction provided in the auction request.
              items:
                $ref: '#/components/schemas/CategoryDisjunction'
              minItems: 1
              maxItems: 5
              example:
                - - c_red
                  - c_blue

    SingleCategory:
      type: object
      description: A category for the purpose of running an auction.
      required:
        - id
      properties:
        id:
          type: string
          description: The category ID of the bids that will participate in an auction.
          minLength: 1
          example: c_yogurt

    CategoryDisjunction:
      type: array
      description: |
        An array of category IDs, describing a category disjunction.

        A bid entity must belong to at least one of the categories in the disjunction in order to participate in the auction.
      items:
        type: string
        description: A category ID.
        minimum: 1
      minItems: 1

    Device:
      type: string
      description: The device for which the ads are meant for.
      enum:
        - desktop
        - mobile
      default: desktop

    DeviceType:
      type: string
      description: The device the user is on.
      enum:
        - desktop
        - mobile
      example: mobile

    Page:
      type: object
      title: Page
      required:
        - type
        - pageId
      properties:
        type:
          type: string
          enum:
            - home
            - category
            - PDP
            - search
            - cart
            - other
          description: Type of page.
          example: 'category'
        value:
          oneOf:
            - type: string
              description: Detail of the page, depending on the type
              example: 'electronics'
            - type: array
              items:
                type: string
                description: Only valid for type cart. Items on the cart
                example: '[ "coffee", "cookies", "apples" ]'
              minItems: 1
        pageId:
          type: string
          description: Identifies the page
          example: '/category/electronics'

    OpaqueUserID:
      type: string
      description:
        The opaque user ID is an anonymized unique identifier that maps to the original user ID without revealing the
        original value. This identifier allows Topsort to correlate user activity between auctions and user
        interactions, independent of the user's logged-in status. For apps or sites where users might interact while
        logged out, we recommend generating a random identifier (UUIDv7) on the first load, storing it on local storage
        (cookie, local storage, etc), and letting it live for at least a year. Otherwise, if your users are always
        logged in for interactions, you may use a hash of your customer ID. Correct purchase attribution requires
        long-lived opaque user IDs consistent between auction and event requests.
      example: 71303ce0-de89-496d-8270-6434589615e8

    PlacementId:
      type: integer
      format: int32
      description: The marketplace's ID of the placement where the ad will appear.

    GeoTargeting:
      type: object
      description: An object describing geographical information associated with this auction.
      required:
        - location
      properties:
        location:
          description: The location this auction is being run for.
          type: string

    SponsoredListingsAuction:
      type: object
      description: |
        Describes the intent of running a sponsored listings auction.

        Exactly **one** of the following fields must be set:
          * `products`
          * `category`
      properties:
        type:
          type: string
          enum:
            - listings
          description: Discriminator for the type of auction.
        slots:
          type: integer
          format: int32
          minimum: 1
          description: Specifies the maximum number of auction winners that should be returned.
        category:
          $ref: '#/components/schemas/Category'
        searchQuery:
          type: string
          description: The search string provided by a user.
        products:
          $ref: '#/components/schemas/Products'
        geoTargeting:
          $ref: '#/components/schemas/GeoTargeting'
        opaqueUserId:
          $ref: '#/components/schemas/OpaqueUserID'
        placementId:
          $ref: '#/components/schemas/PlacementId'
      required:
        - type
        - slots
      example:
        type: listings
        slots: 2
        products:
          ids:
            - p_PJbnN
            - p_ojng4
            - p_8VKDt
            - p_Mfk15
        # category:
        #   id: c_yogurt
        # searchQuery: Noosa Peach
        geoTargeting:
          location: New York

    BannersAuction:
      type: object
      description: |
        Describes the intent of running a banner ads auction.

          * For **Landing Page** banners, `category` and `searchQuery` must be empty.
          * For **Category** banners, the `category` field must be set.
          * For **Keywords** banners, the `searchQuery` field must be set.
      properties:
        type:
          type: string
          enum:
            - banners
          description: Discriminator for the type of auction.
        slots:
          type: integer
          format: int32
          minimum: 1
          description: Specifies the maximum number of auction winners that should be returned.
        category:
          $ref: '#/components/schemas/Category'
        searchQuery:
          type: string
          description: The search string provided by a user.
        device:
          $ref: '#/components/schemas/Device'
        geoTargeting:
          $ref: '#/components/schemas/GeoTargeting'
        slotId:
          type: string
          description: The ID of the banner placement for which this auction will be run for.
          minLength: 1
        products:
          $ref: '#/components/schemas/Products'
        opaqueUserId:
          $ref: '#/components/schemas/OpaqueUserID'
        placementId:
          $ref: '#/components/schemas/PlacementId'
      required:
        - type
        - slots
        - slotId
      example:
        type: banners
        slots: 1
        slotId: categories-ribbon-banner
        category:
          id: c_yogurt

    AuctionRequest:
      description: Describes the intent of running a single auction.
      oneOf:
        - $ref: '#/components/schemas/SponsoredListingsAuction'
        - $ref: '#/components/schemas/BannersAuction'

    RankingRequest:
      type: object
      description: |
        Describes the context related to a Ranking request
      properties:
        type:
          type: string
          enum:
            - listings
          description: Type of object to be ranked
        slots:
          type: integer
          format: int32
          minimum: 1
          description: Specifies the maximum number of ranked objects that should be returned.
        pageSize:
          type: integer
          format: int32
          minimum: 1
          description: Specifies the maximum number of ranked objects per page that should be returned.
        page:
          $ref: '#/components/schemas/Page'
        category:
          $ref: '#/components/schemas/Category'
        device:
          $ref: '#/components/schemas/Device'
        geoTargeting:
          $ref: '#/components/schemas/GeoTargeting'
        products:
          $ref: '#/components/schemas/Products'
        opaqueUserId:
          type: string
          description: |
            The opaque user ID allows correlating user activity, such as Impressions, Clicks and Purchases,
            whether or not they are actually logged in. It must be long lived (at least a year) so that Topsort can attribute purchases.
            If your users are always logged in you may use a hash of your customer ID.
            If your users may interact with your app or site while logged out we
            recommend generating a random identifier (UUIDv4) on first load and store it on
            local storage (cookie, local storage, etc) and let it live for at least a year.
          minLength: 1
          example: 71303ce0-de89-496d-8270-6434589615e8
      required:
        - type
        - slots
        - pageSize
        - page
        - opaqueUserId
      example:
        type: listings
        slots: 10
        pageSize: 10
        category:
          ids: ['sneakers', 'shoes']
        products:
          ids: ['p_PJbnN', 'p_ojng4']

    PredictionRequest:
      type: object
      properties:
        metrics:
          type: object
          description: Metrics to predict, the response will include all the selected metrics.
          properties:
            ctr:
              type: boolean
              description: If `true` a Click Through Rate prediction will be made.
            cvr:
              type: boolean
              description: If `true` a Conversion Rate prediction will be made.
        opaqueUserId:
          type: string
          description:
            The opaque user ID is an anonymized unique identifier that maps to the original user ID without revealing the
            original value. This identifier allows Topsort to use interactions information to later on provide a prediction
            of the outcome of the interaction between the user and a product.
          example: 71303ce0-de89-496d-8270-6434589615e8
        page:
          $ref: '#/components/schemas/Page'
        objectType:
          type: string
          description: The type of object that is being reported on the interaction.
          enum:
            - listings
            - banners
        deviceType:
          $ref: '#/components/schemas/DeviceType'
        productIds:
          type: array
          items:
            type: string
            example: ['p_1234', 'p_5678']
      required:
        - metrics
        - productIds
        - opaqueUserId

    RetrievalRequest:
      type: object
      properties:
        slots:
          type: integer
          description: How many objects to retrieve.
          example: 10
          minimum: 1
          maximum: 100
        opaqueUserId:
          type: string
          description:
            The opaque user ID is an anonymized unique identifier that maps to the original user ID without revealing the
            original value. This identifier allows Topsort to use interactions information to later on provide a prediction
            of the outcome of the interaction between the user and a product.
          example: 71303ce0-de89-496d-8270-6434589615e8
        page:
          $ref: '#/components/schemas/Page'
        objectType:
          type: string
          description: The type of object that needs to be retrieved.
          enum:
            - listings
            - banners
        deviceType:
          $ref: '#/components/schemas/DeviceType'
        seedProductIds:
          type: array
          items:
            type: string
          example: ['p_1234', 'p_5678']
        mode:
          type: string
          description: Retrieval mode, how to interpret the context to get objects.
          enum:
            - all
            - complement
            - similar
          default: all
      required:
        - slots
        - seedProductIds
        - opaqueUserId
        - objectType

    AuctionResult:
      discriminator:
        propertyName: resultType
        mapping:
          listings: '#/components/schemas/SponsoredListingsAuctionResult'
          banners: '#/components/schemas/BannersAuctionResult'
      oneOf:
        - $ref: '#/components/schemas/SponsoredListingsAuctionResult'
        - $ref: '#/components/schemas/BannersAuctionResult'

    TravelAuctionResult:
      oneOf:
        - $ref: '#/components/schemas/HotelsAuctionResult'
        - $ref: '#/components/schemas/FlightsAuctionResult'

    BannersAuctionResult:
      type: object
      properties:
        resultType:
          type: string
        winners:
          type: array
          items:
            $ref: '#/components/schemas/BannersWinner'
          description: >
            Array of winner objects in order from highest to lowest bid.
            It will be empty if there were no qualifying bids or if there was an error.
        error:
          type: boolean
          description: A boolean indicating whether this auction was resolved successfully.
          example: false
      required:
        - winners
        - error
        - resultType

    SponsoredListingsAuctionResult:
      type: object
      properties:
        resultType:
          type: string
        winners:
          type: array
          items:
            $ref: '#/components/schemas/SponsoredListingsWinner'
          description: >
            Array of winner objects in order from highest to lowest bid.
            It will be empty if there were no qualifying bids or if there was an error.
        error:
          type: boolean
          description: A boolean indicating whether this auction was resolved successfully.
          example: false
      required:
        - winners
        - error
        - resultType

    SponsoredListingsWinner:
      type: object
      required:
        - rank
        - type
        - id
        - resolvedBidId
        - campaignId
      properties:
        rank:
          type: integer
          format: int32
          description: >
            Where the product's bid ranked in the auction.
            One-based, so the product with rank 1 won the auction.
            In an auction response, the winners array is sorted so rank will match the entry's index.
          minimum: 1
        type:
          type: string
          description: The target type of the winning bid.
          enum:
            - product
            - vendor
            - brand
            - url
        id:
          type: string
          description: |-
            The marketplace's ID of the winning entity, depending on the target of the campaign.
          example: p_Mfk15
        resolvedBidId:
          type: string
          description: An opaque Topsort ID to be used when this item is interacted with.
          example: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
        campaignId:
          type: string
          description: The ID of the campaign that won the auction.
          example: 4bcc6093-f367-4df2-aa1b-7c1674dd6441

    BannersWinner:
      type: object
      required:
        - rank
        - type
        - id
        - resolvedBidId
        - asset
      properties:
        rank:
          type: integer
          format: int32
          description: >
            Where the product's bid ranked in the auction.
            One-based, so the product with rank 1 won the auction.
            In an auction response, the winners array is sorted so rank will match the entry's index.
          minimum: 1
        type:
          type: string
          description: The target type of the winning bid.
          enum:
            - product
            - vendor
            - brand
            - url
        id:
          type: string
          description: |-
            The marketplace's ID of the winning entity, depending on the target of the campaign.
          example: p_Mfk15
        resolvedBidId:
          type: string
          description: An opaque Topsort ID to be used when this item is interacted with.
          example: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
        campaignId:
          type: string
          description: The ID of the campaign that won the auction.
          example: 4bcc6093-f367-4df2-aa1b-7c1674dd6441
        asset:
          description: The list of available sources for a banner.
          type: array
          items:
            $ref: '#/components/schemas/AssetSource'
          minItems: 1

    HotelsAuctionResult:
      $ref: '#/components/schemas/SponsoredListingsAuctionResult'

    FlightsAuctionResult:
      type: object
      properties:
        resultType:
          type: string
        winners:
          type: array
          items:
            $ref: '#/components/schemas/FlightsWinner'
          description: >
            Array of winner objects in order from highest to lowest bid.
            It will be empty if there were no qualifying bids or if there was an error.
        error:
          type: boolean
          description: A boolean indicating whether this auction was resolved successfully.
          example: false
      required:
        - winners
        - error
        - resultType

    FlightsWinner:
      type: object
      required:
        - rank
        - type
        - id
        - resolvedBidId
        - campaignId
        - variationID
      properties:
        rank:
          type: integer
          format: int32
          description: >
            Where the product's bid ranked in the auction.
            One-based, so the product with rank 1 won the auction.
            In an auction response, the winners array is sorted so rank will match the entry's index.
          minimum: 1
        type:
          type: string
          description: The target type of the winning bid.
          enum:
            - product
        id:
          type: string
          description: |-
            The marketplace's ID of the winning flight product, depending on the target of the campaign.
          example: p_Mfk15
        resolvedBidId:
          type: string
          description: An opaque Topsort ID to be used when this item is interacted with.
          example: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
        campaignId:
          type: string
          description: The ID of the campaign that won the auction.
          example: 4bcc6093-f367-4df2-aa1b-7c1674dd6441
        variationID:
          type: string
          description: The marketplace's ID for the winning flight product's variation.

    RankingResult:
      type: object
      properties:
        resultType:
          type: string
        results:
          type: array
          items:
            $ref: '#/components/schemas/RankingWinner'
          description: >
            Array of ranking objects in order from highest to lowest relevancy.
        error:
          type: boolean
          description: A boolean indicating whether this auction was resolved successfully.
          example: false
      required:
        - results
        - error
        - resultType

    RankingWinner:
      type: object
      required:
        - rank
        - type
        - id
        - resolvedItemId
      properties:
        rank:
          type: integer
          format: int32
          description: >
            Where is the product ranked in the auction.
          minimum: 1
        type:
          type: string
          description: The target type of the winning bid.
          enum:
            - organic
            - sponsored
        id:
          type: string
          description: |-
            The marketplace's ID of the ranked entity.
          example: p_Mfk15
        resolvedItemId:
          type: string
          description: An opaque Topsort ID to be used when this item is interacted with.
          example: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=

    PredictionResult:
      type: object
      properties:
        objectType:
          type: string
          enum:
            - listings
            - banners
          description: The type of object that was predicted.
        predictions:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
                description: Product identifier defined on the request.
              ctr:
                type: number
                description: Click-Through Rate prediction.
              cvr:
                type: number
                description: Conversion Rate prediction.
          description: >
            Predicted objects.
      required:
        - objectType
        - predictions

    RetrievalResults:
      type: object
      properties:
        objectType:
          type: string
          enum:
            - listings
            - banners
          description: The type of object that was predicted.
        objects:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: Object identifier defined on the request.
              score:
                type: number
                description: Relevance score for the retrieved products.
          description: >
            Retrieved objects.
      required:
        - objectType
        - objects

    InteractionObject:
      type: object
      description: Information regarding an organic or non-sponsored event.
      required:
        - type
      properties:
        type:
          type: string
          description: The type of object that is being reported on the interaction.
          enum:
            - listing
            - banner
        assetId:
          type: string
          description: When type is `banner`, signals the ID of the asset of the banner
          example: banner_asset_001
        clickType:
          type: string
          description: When type is `listing`, signals the specific interaction flavor with the listing.
          enum:
            - product
            - like
            - add-to-cart

    # Dimensions:
    #   type: object
    #   description: The dimensions of this source.
    #   properties:
    #     width:
    #       type: integer
    #       format: int32
    #       description: The source width in pixels.
    #       minimum: 1
    #     height:
    #       type: integer
    #       format: int32
    #       description: The source height in pixels.
    #       minimum: 1
    #   required:
    #     - width
    #     - height

    AssetSource:
      description: A source available for an asset (banner or video).
      type: object
      properties:
        # mimeType:
        #   type: string
        #   description: The MIME type of this source.
        #   example: image/png
        # dimensions:
        #   $ref: '#/components/schemas/Dimensions'
        # fileSize:
        #   type: integer
        #   format: int32
        #   description: The file size in bytes.
        #   example: 238490
        url:
          type: string
          format: uri
          description: >
            A vendor provided asset that the marketplace has to use as a banner.
            The asset will be served by Topsort's CDN.
      required:
        # - mimeType
        # - dimensions
        # - fileSize
        - url

    Products:
      required:
        - ids
      type: object
      properties:
        ids:
          type: array
          description: >
            An array of product IDs that should participate in the auction.
            We recommend sending no more than 500 products per auction.
          items:
            type: string
            description: >
              The marketplace's ID of a product which will participate in the auction.
              These ID must match those in the catalog integration with Topsort.
            example: p_SA0238
            minLength: 1
          minItems: 1
          maxItems: 10000
        qualityScores:
          type: array
          description: |
            An array of marketplace defined quality scores, each corresponding to the product ID with matching array index.
            If given, these values will be combined with our internal quality scores to provide a score
            that better represents the relevance of the participating products.
            Note that the length of this array must be the same as the length of the `ids` array and
            that the values must be between 0 and 1.
          items:
            type: number
            minimum: 0
            maximum: 1
            exclusiveMinimum: true
            example: 0.75
            format: double
          minItems: 1
          maxItems: 10000

    SponsoredBrandAuctionRequest:
      type: object
      description: |
        Describes the intent of running a sponsored brand auction.

        Exactly **one** of the following fields must be set:
          * `products`
          * `category`
      required:
        - winners
        - placementId
        - triggers
      properties:
        winners:
          type: integer
          format: int32
          minimum: 1
          description: Specifies the maximum number of auction winners that should be returned.
        placementId:
          type: string
          x-stoplight:
            id: biqordtdbp58t
        triggers:
          type: object
          x-stoplight:
            id: ne5n2vzri6o92
          properties:
            category:
              $ref: '#/components/schemas/SingleCategory'
            products:
              $ref: '#/components/schemas/Products'
        opaqueUserId:
          $ref: '#/components/schemas/OpaqueUserID'
      x-examples:
        Example 1:
          auctions:
            - winners: 2
              placementId: some-placement
              triggers:
                products:
                  ids:
                    - '1'
                    - '8'

    SponsoredBrandAuctionResult:
      type: object
      properties:
        winners:
          type: array
          items:
            $ref: '#/components/schemas/SponsoredBrandWinner'
          description: |
            Array of winner objects in order from highest to lowest bid. It will be empty if there were no qualifying bids or if there was an error.
        error:
          type: boolean
          description: A boolean indicating whether this auction was resolved successfully.
          example: false
      required:
        - winners
        - error
      x-examples:
        Example 1:
          results:
            - winners:
                - rank: 1
                  resolvedBidId: ChAGc-G66Wt7LKQEOcW8VBdIEhABjz_zDXx7db-ZYpxiwJ3DGhABjr4Lt_J0_a7Xv_uIfyOXIgUKATEQATDrrg8
                  productId: '1'
                  title: Brand Example Promo 1
                  assets:
                    - url: 'https://assets.hosted.topsort.com/5bcccb92e5eaaa73ce9fcc545e944865bf70e9b60e5a048979769282450343c4/example-banner-1.png'
                      role: image
                      contentType: image/png
                      contentLength: 33902
                      width: 920
                      height: 920
                    - url: 'https://assets.hosted.topsort.com/c27c9cd94badc90fb50827e144dfacb2f51a601560905b950f525cec725ea85f/example-logo-1.png'
                      role: logo
                      contentType: image/png
                      contentLength: 80648
                      width: 264
                      height: 264
                  campaignId: 018f3ff3-0d7c-7b75-bf99-629c62c09dc3
                - rank: 2
                  resolvedBidId: ChAGc-G66Wt7LKQEOcW8VBdIEhABk0pue7N5wYmzE04uO_iOGhABjr4Lt_J0_a7Xv_uIfyOXIgUKATgQATDrrg8
                  productId: '8'
                  title: Brand Example Promo 2
                  assets:
                    - url: 'https://assets.hosted.topsort.com/c049a46d834ab071cdde63e401d4efcd554e1a124f05c4ba9b3743fed2d43c4b/example-banner-2.jpeg'
                      role: image
                      contentType: image/jpeg
                      contentLength: 4505
                      width: 403
                      height: 125
                    - url: 'https://assets.hosted.topsort.com/db41a8b8b22c5ed9091f9f154b552b6bc1d1dbeb85059190f1c3b202977938f1/example-logo-2.png'
                      role: logo
                      contentType: image/png
                      contentLength: 34747
                      width: 140
                      height: 160
                  campaignId: 01934a6e-7bb3-79c1-89b3-134e2e3bf88e
              error: false

    SponsoredBrandWinner:
      type: object
      required:
        - rank
        - productId
        - resolvedBidId
        - assets
      properties:
        rank:
          type: integer
          format: int32
          description: >
            Where the product's bid ranked in the auction.
            One-based, so the product with rank 1 won the auction.
            In an auction response, the winners array is sorted so rank will match the entry's index.
          minimum: 1
        productId:
          type: string
          description: |-
            The marketplace's ID of the winning entity, depending on the target of the campaign.
          example: p_Mfk15
        resolvedBidId:
          type: string
          description: An opaque Topsort ID to be used when this item is interacted with.
          example: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
        title:
          type: string
          description: An optional title for the sponsored brand selected when creating the campaign.
        vendorId:
          type: string
          description: The ID of the vendor associated with this sponsored brand winner.
          example: v_8fj2D
        assets:
          description: Assets used to render the sponsored brand ad.
          type: array
          items:
            $ref: '#/components/schemas/SponsoredBrandAsset'
          minItems: 1

    SponsoredBrandAsset:
      type: object
      properties:
        url:
          type: string
          format: uri
          description: >
            A vendor provided asset that the marketplace has to render.
            The asset will be served by Topsort's CDN.
        role:
          type: string
          description: The role of the asset. It can be either `logo` or `image`.
        contentType:
          type: string
          description: The asset MIME type.
        contentLength:
          type: integer
          format: uint32
          description: The size of the asset in bytes.
        width:
          type: integer
          format: uint32
          description: The asset width in pixels.
        height:
          type: integer
          format: uint32
          description: The asset height in pixels.

    TravelAuctionRequest:
      description: Describes the intent of running a single auction.
      oneOf:
        - $ref: '#/components/schemas/HotelsAuctionRequest'
        - $ref: '#/components/schemas/FlightsAuctionRequest'

    HotelsAuctionRequest:
      type: object
      description: Describes the intent of running a hotel travel auction.
      required:
        - travelContext
      properties:
        type:
          type: string
          enum:
            - hotels
          description: Discriminator for the type of travel auction.
        slots:
          type: integer
          format: int32
          description: Specifies the maximum number of auction winners that should be returned.
        products:
          type: array
          description: An array of hotels products that should participate in the auction.
          items:
            $ref: '#/components/schemas/HotelsTravelProduct'
        travelContext:
          $ref: '#/components/schemas/HotelsTravelContext'

    HotelsTravelProduct:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: ID to identify hotel product.
          example: miami-hotel
        qualityScore:
          type: number
          minimum: 0
          maximum: 1
          exclusiveMinimum: true
          example: 0.75
          format: double
          description: |
            If given, this value will be combined with our internal quality
            score to provide a score that better represents the relevance of the
            participating products. If not given it will default to 1.
            Values must be between 0 and 1.

    BaseTravelContext:
      type: object
      required:
        - site
      properties:
        site:
          type: string
          minLength: 1
          maxLength: 64
          description: Web site requesting the auction
          example: argentina
        passengers:
          type: integer
          description: Number of passengers. Must not exceed 10.
          example: 3
        travelStartDate:
          type: string
          format: date
          description: RFC3339 formatted date representing the travel start point.
          example: '2009-01-01'
        travelEndDate:
          type: string
          format: date
          description: |
            RFC3339 formatted date representing the travel end point. Must be greater than start date.
          example: '2009-01-15'
        travelerType:
          type: string
          enum:
            - family
            - group
            - solo
            - couple
        pageName:
          type: string
          description: Page name e.g. "flights", "hotels", "package", ...
        platform:
          type: string
          description: Platform e.g. "app", "mobile", "web", ...

    HotelsTravelContext:
      allOf:
        - $ref: '#/components/schemas/BaseTravelContext'

    FlightsAuctionRequest:
      type: object
      description: Describes the intent of running a flight travel auction.
      required:
        - travelContext
      properties:
        type:
          type: string
          enum:
            - flights
          description: Discriminator for the type of travel auction.
        slots:
          type: integer
          format: int32
          description: Specifies the maximum number of auction winners that should be returned.
        products:
          type: array
          description: An array of flight products that should participate in the auction.
          items:
            $ref: '#/components/schemas/FlightsTravelProduct'
        travelContext:
          $ref: '#/components/schemas/FlightsTravelContext'

    FlightsTravelProduct:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: ID to identify flight product.
          example: L0_SAO-ORL
        variationID:
          type: string
          description: ID to identify flight product variation.
        price:
          type: number
          description: Flight product variation total price in marketplace currency.
        qualityScore:
          type: number
          minimum: 0
          maximum: 1
          exclusiveMinimum: true
          example: 0.75
          format: double
          description: |
            If given, this value will be combined with our internal quality
            score to provide a score that better represents the relevance of the
            participating products. If not given it will default to 1.
            Values must be between 0 and 1.

    FlightsTravelContext:
      allOf:
        - $ref: '#/components/schemas/BaseTravelContext'
        - type: object
          properties:
            route:
              type: string
              description: Flight route code.
            flightType:
              type: string
              description: Flight type e.g. "round_trip", "one_way", ...

    Error:
      type: object
      required:
        - errCode
      properties:
        errCode:
          type: string
          description: A short string uniquely identifying the problem.
          enum:
            - bad_request
            - empty_request
            - internal_server_error
            - invalid_api_key
            - invalid_auction_id
            - invalid_event_type
            - invalid_promotion_type
            - invalid_session
            - missing_auctions
            - missing_context
            - missing_placement
            - missing_product_id
            - missing_promotion_type
            - missing_purchased_at
            - missing_session
            - missing_slot_id
            - missing_slots
            - no_products
            - no_purchase_items
            - purchase_item_quantity_less_or_equal_than_zero
            - resolved_bid_id_not_found
            - too_few_impressions
            - too_few_slots
            - too_many_auctions
        docUrl:
          type: string
          format: uri
          description: A link to a documentation page providing more information about the error.
          example: https://docs.topsort.com/reference/errors
        message:
          type: string
          description: >
            Human-readable explanation of or details about the error.
            The string for a given error may change over time; code should not parse or dispatch based on particular values for this field.
    Placement:
      type: object
      required:
        - path
      additionalProperties: false
      properties:
        path:
          type: string
          description: |
            URL path of the page triggering the event.

            For web apps, this can be obtained in JS using `window.location.pathname`.

            For mobile apps, use the deep link for the current view, if available.
            Otherwise, encode the view from which the event occurred in your app as a path-like string (e.g. `/root/categories/:categoryId`).
          minLength: 1
          example: /categories/dairy
        position:
          type: integer
          description: >
            For components with multiple items
            (i.e. search results, similar products, etc),
            this should indicate the index of a given item within that list.
          minimum: 1
        page:
          type: integer
          description: >
            For paginated pages, this should indicate which page number triggered the event.
          minimum: 1
        pageSize:
          type: integer
          description: >
            For paginated pages this should indicate how many items are in each result page.
          minimum: 1
          example: 15
        productId:
          type: string
          description: >
            The ID of the product associated to the page in which this event occurred, if applicable.
            This ID must match the ID provided through the catalog service.
          minLength: 1
        categoryIds:
          type: array
          items:
            type: string
            minLength: 1
            description: A category ID.
          description: >
            An array of IDs of the categories associated to the page in which this event occurred, if applicable.
            These IDs must match the IDs provided through the catalog service.
          minItems: 1
        searchQuery:
          type: string
          description: >
            The search string provided by the user in the page where this event occurred, if applicable.
            This search string must match the searchQuery field that was provided in the auction request (if provided).
          minLength: 1
    Entity:
      type: object
      description: >
        `Entity` is meant for reporting organic events, not sponsored or promoted products. It refers to the object
        involved in the organic interaction. But, in most cases, you won't need to fill in this object. Be aware that
        if `resolvedBidId` has any value, `entity` will be disregarded.
      required:
        - id
        - type
      additionalProperties: false
      properties:
        id:
          type: string
          description: The marketplace's ID of the entity associated with the interaction.
          minLength: 1
        type:
          type: string
          description: The type of entity associated with the interaction.
          enum:
            - product
            - vendor
    EventsRequest:
      type: object
      additionalProperties: false
      properties:
        impressions:
          type: array
          items:
            $ref: '#/components/schemas/Impression'
          minItems: 1
          maxItems: 50
        clicks:
          type: array
          items:
            $ref: '#/components/schemas/Click'
          minItems: 1
          maxItems: 50
        purchases:
          type: array
          items:
            $ref: '#/components/schemas/Purchase'
          minItems: 1
          maxItems: 50
        pageviews:
          type: array
          items:
            $ref: '#/components/schemas/Pageview'
          minItems: 1
          maxItems: 50
      minProperties: 1
      example:
        impressions:
          - id: eb874c98-bf4d-40a9-ae6d-fcf4cecb535c
            occurredAt: '2019-01-01T12:59:59-05:00'
            opaqueUserId: 71303ce0-de89-496d-8270-6434589615e8
            placement:
              path: /categories/dairy
              position: 1
              page: 1
              pageSize: 15
              categoryId: 9BLIe
            resolvedBidId: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
            deviceType: mobile
            channel: onsite
        clicks:
          - id: b39d39ed-ea0e-4059-9d15-4990b39c85a2
            occurredAt: '2019-01-01T13:01:42-05:00'
            opaqueUserId: 71303ce0-de89-496d-8270-6434589615e8
            placement:
              path: /categories/dairy
              position: 1
              page: 1
              pageSize: 15
              categoryId: 9BLIe
            resolvedBidId: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
            deviceType: mobile
            channel: offsite
        purchases:
          - id: 0e06c899-b2cd-4e0d-b0de-8aefb4b6d0a0
            items:
              - productId: p_SA0238
                unitPrice: 12.95
                quantity: 2
                vendorId: v_8fj2D
              - productId: p_oajf2D
                unitPrice: 1.49
            occurredAt: '2019-01-01T12:59:59-05:00'
            opaqueUserId: 71303ce0-de89-496d-8270-6434589615e8
            deviceType: desktop
            channel: onsite
          - id: b7147656-504f-4ae7-b335-740829ff64c6
            items:
              - productId: p_SA0279
                unitPrice: 119.95
                quantity: 5
                vendorId: v_8fj2D
            occurredAt: '2019-01-01T13:59:59-05:00'
            opaqueUserId: 71303ce0-de89-496d-8270-6434589615e8
            channel: instore
        pageviews:
          - id: 8f648a8e-830c-4bb4-9d93-6ea80075ca82
            occurredAt: '2019-01-01T12:59:58-05:00'
            opaqueUserId: 71303ce0-de89-496d-8270-6434589615e8
            page:
              type: category
              pageId: /categories/dairy
              value: dairy
            deviceType: mobile
            channel: onsite
    Impression:
      type: object
      description: >
        An impression means a promotable has become visible to the consumer.
        For promoted entities, include the `resolvedBidId` field from the `/v2/auctions` response.
        For unpromoted entities, include the `entity` field to describe what was seen.
        In case you cannot send an impression when the product becomes visible, send us an impression event when the product was rendered in the HTML or, if that's also not possible, when your API returns the results.
        It is important to select the most specific event so that your vendors have more accurate CTR metrics, which will allow them to better predict their campaigns.
      required:
        - occurredAt
        - opaqueUserId
        - id
      additionalProperties: false
      properties:
        resolvedBidId:
          type: string
          description: If the impression is over an ad promotion, this is the `resolvedBidId` field received from the `/auctions` request. In most situations, especially when reporting a sponsored interaction, you'll want to fill in this field.
          example: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
        entity:
          $ref: '#/components/schemas/Entity'
        placement:
          $ref: '#/components/schemas/Placement'
        occurredAt:
          type: string
          format: date-time
          description: RFC3339 formatted timestamp including UTC offset.
          example: '2009-01-01T12:59:59-05:00'
        opaqueUserId:
          $ref: '#/components/schemas/OpaqueUserID'
        id:
          type: string
          description: >
            The marketplace's unique ID for the impression.
            This field ensures the event reporting is idempotent in case there is a network issue and the request is retried.
            If there is no impression model on the marketplace side, generate a unique string that does not change if the event is resent.
          minLength: 1
          example: eb874c98-bf4d-40a9-ae6d-fcf4cecb535c
        additionalAttribution:
          $ref: '#/components/schemas/Entity'
        page:
          $ref: '#/components/schemas/Page'
        object:
          $ref: '#/components/schemas/InteractionObject'
        externalCampaignId:
          type: string
          description: Marketplace provided ID for a campaign
          example: 'awareness-campaign-2025'
        externalVendorId:
          type: string
          description: Marketplace provided ID for a vendor
          example: 'my-new-vendor'
        deviceType:
          $ref: '#/components/schemas/DeviceType'
        channel:
          type: string
          description: Optional. The channel where the event occurred.
          enum: ['onsite', 'offsite', 'instore']
          example: 'onsite'

    Click:
      description: >
        A click is sent to Topsort when the consumer has clicked on a promotable.
        For promoted entities, include the `resolvedBidId` field from the `/v2/auctions` response.
        For unpromoted entities, include the `entity` field to describe what was clicked.
        Topsort charges the vendor and pays the marketplace for clicks on ads in promoted placements on the marketplace app.
      type: object
      required:
        - occurredAt
        - opaqueUserId
        - id
      additionalProperties: false
      properties:
        resolvedBidId:
          type: string
          description: If the click is over an ad promotion, this is the `resolvedBidId` field received from the `/auctions` request. In most situations, especially when reporting a sponsored interaction, you'll want to fill in this field.
          example: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
        entity:
          $ref: '#/components/schemas/Entity'
        placement:
          $ref: '#/components/schemas/Placement'
        occurredAt:
          type: string
          format: date-time
          description: RFC3339 formatted timestamp including UTC offset.
          example: '2009-01-01T12:59:59-05:00'
        opaqueUserId:
          $ref: '#/components/schemas/OpaqueUserID'
        id:
          type: string
          description: >
            The marketplace's unique ID for the click.
            This field ensures the event reporting is idempotent in case there is a network issue and the request is retried.
            If there is no click model on the marketplace side, generate a unique string that does not change if the event is resent.
          minLength: 1
          example: b39d39ed-ea0e-4059-9d15-4990b39c85a2
        additionalAttribution:
          $ref: '#/components/schemas/Entity'
        page:
          $ref: '#/components/schemas/Page'
        object:
          $ref: '#/components/schemas/InteractionObject'
        clickType:
          type: string
          description: For sponsored events only, signals the specific interaction flavor with the listing.
          enum:
            - product
            - like
            - add-to-cart
        externalCampaignId:
          type: string
          description: Marketplace provided ID for a campaign
          example: 'awareness-campaign-2025'
        externalVendorId:
          type: string
          description: Marketplace provided ID for a vendor
          example: 'my-new-vendor'
        deviceType:
          $ref: '#/components/schemas/DeviceType'
        channel:
          type: string
          description: Optional. The channel where the event occurred.
          enum: ['onsite', 'offsite', 'instore']
          example: 'onsite'

    Purchase:
      description: >
        A purchase is sent to Topsort once a marketplace customer places an order.
        These events are used to measure the effectiveness of an ad campaign.
      type: object
      required:
        - occurredAt
        - opaqueUserId
        - items
        - id
      additionalProperties: false
      properties:
        occurredAt:
          type: string
          description: RFC3339 formatted timestamp, including UTC offset, of the instant in which the order was placed. Please note that purchases will NOT be attributed to an auction that happened after.
          example: '2021-10-12T07:20:50.52Z'
          format: date-time
        opaqueUserId:
          $ref: '#/components/schemas/OpaqueUserID'
        items:
          type: array
          description: Items purchased.
          minItems: 1
          items:
            $ref: '#/components/schemas/PurchaseItem'
        id:
          type: string
          description: >
            The marketplace unique ID for the order.
            This field ensures the event reporting is idempotent in case there is a network issue and the request is retried.
            If there is no unique ID for orders on the marketplace side, generate a unique string that does not change if the event needs to be resent.
          minLength: 1
          example: 0e06c899-b2cd-4e0d-b0de-8aefb4b6d0a0
        deviceType:
          $ref: '#/components/schemas/DeviceType'
        channel:
          type: string
          description: Optional. The channel where the event occurred.
          enum: ['onsite', 'offsite', 'instore']
          example: 'onsite'
    PurchaseItem:
      type: object
      required:
        - productId
        - unitPrice
      additionalProperties: false
      properties:
        productId:
          type: string
          description: The marketplace ID of the product being purchased.
          minLength: 1
          example: p_SA0238
        quantity:
          type: integer
          minimum: 1
          default: 1
          description: Count of products purchased.
          example: 2
        unitPrice:
          type: number
          format: double
          minimum: 0.0
          exclusiveMinimum: true
          description: The price of a single item in the marketplace currency.
          example: 12.95
        vendorId:
          type: string
          description: >
            The vendor ID of the product being purchased. This field is optional
            and should be filled in if 1. a product is sold by multiple vendors, or
            2. you want to use it for halo attribution
          minLength: 1
          example: v_8fj2D
    Pageview:
      type: object
      description: >
        A page view represents the navigation of the user throughout the page. They are considered organic events.
        In contrast to clicks or impressions, which are events within a page, a page view is the interaction with the full page, which can contain multiple objects.
      required:
        - occurredAt
        - opaqueUserId
        - id
        - page
      additionalProperties: false
      properties:
        page:
          $ref: '#/components/schemas/Page'
        occurredAt:
          type: string
          format: date-time
          description: RFC3339 formatted timestamp including UTC offset.
          example: '2009-01-01T12:59:59-05:00'
        opaqueUserId:
          $ref: '#/components/schemas/OpaqueUserID'
        id:
          type: string
          description: >
            The marketplace's unique ID for the event.
            This field ensures the event reporting is idempotent in case there is a network issue and the request is retried.
            If there is no pageview model on the marketplace side, generate a unique string that does not change if the event is resent.
          minLength: 1
          example: eb874c98-bf4d-40a9-ae6d-fcf4cecb535c
        deviceType:
          $ref: '#/components/schemas/DeviceType'
        channel:
          type: string
          description: Optional. The channel where the event occurred.
          enum: ['onsite', 'offsite', 'instore']
          example: 'onsite'
    AudienceResponsePublic:
      properties:
        createdAt:
          description: When the audience was created.
          format: date-time
          title: Createdat
          type: string
        description:
          type: string
          description: Optional description of the audience.
          title: Description
        dsp:
          $ref: '#/components/schemas/PublicDSP'
        id:
          description: The unique identifier of the audience.
          format: uuid
          title: Id
          type: string
        name:
          description: The name of the audience.
          title: Name
          type: string
        updatedAt:
          description: When the audience was last updated.
          format: date-time
          title: Updatedat
          type: string
        userCount:
          description: Number of users in the audience.
          title: Usercount
          type: integer
      required:
        - id
        - name
        - dsp
        - userCount
        - createdAt
        - updatedAt
      title: AudienceResponsePublic
      type: object
    Body_upload_audience_users_public:
      properties:
        file:
          description: CSV file containing user emails
          format: binary
          title: File
          type: string
      required:
        - file
      title: Body_upload_audience_users_public
      type: object
    CampaignCreationJobResult:
      properties:
        campaignId:
          description: The unique identifier of the campaign.
          format: uuid
          title: Campaignid
          type: string
      required:
        - campaignId
      title: CampaignCreationJobResult
      type: object
    CampaignGeoTargetingResponse:
      properties:
        regionIds:
          description: A list of geotargeting IDs.
          items:
            type: string
          title: Regionids
          type: array
      required:
        - regionIds
      title: CampaignGeoTargetingResponse
      type: object
    CampaignResponsePublic:
      properties:
        budget:
          description: The campaign budget in minor currency units.
          title: Budget
          type: integer
        endDate:
          type: string
          format: date-time
          description: The end date and time of the campaign (UTC), optional.
          title: Enddate
        id:
          description: The unique identifier of the campaign.
          format: uuid
          title: Id
          type: string
        name:
          description: The name of the campaign.
          title: Name
          type: string
        startDate:
          description: The start date and time of the campaign (UTC).
          format: date-time
          title: Startdate
          type: string
        status:
          $ref: '#/components/schemas/Status'
      required:
        - id
        - name
        - startDate
        - budget
        - status
      title: CampaignResponsePublic
      type: object
    CreateAdvertiserRequestPublic:
      properties:
        dsp:
          $ref: '#/components/schemas/PublicDSP'
        vendorId:
          description: The vendor ID from the external system.
          title: Vendorid
          type: string
      required:
        - vendorId
        - dsp
      title: CreateAdvertiserRequestPublic
      type: object
    CreateAudienceRequestPublic:
      properties:
        description:
          type: string
          description: Optional description of the audience.
          title: Description
        dsp:
          $ref: '#/components/schemas/PublicDSP'
        name:
          description: The name of the audience.
          title: Name
          type: string
      required:
        - name
        - dsp
      title: CreateAudienceRequestPublic
      type: object
    CreateCampaignRequestPublic:
      properties:
        budget:
          description: The campaign budget in minor currency units.
          title: Budget
          type: integer
        dsp:
          $ref: '#/components/schemas/PublicDSP'
        endDate:
          type: string
          format: date-time
          description: The end date and time of the campaign (UTC), optional.
          title: Enddate
        locationIds:
          description: List of location IDs to target.
          items:
            type: string
          title: Locationids
          type: array
        name:
          description: The name of the campaign.
          title: Name
          type: string
        productIds:
          type: array
          items:
            type: string
          description: List of product IDs to target, optional.
          title: Productids
        startDate:
          description: The start date and time of the campaign (UTC).
          format: date-time
          title: Startdate
          type: string
      required:
        - dsp
        - name
        - startDate
        - locationIds
        - budget
      title: CreateCampaignRequestPublic
      type: object
    DailyReportData:
      description:
        Clicks, impressions and purchases attributed to this report item
        so far, for a particular date
      properties:
        clicks:
          $ref: '#/components/schemas/Events'
        date:
          description: The date for this aggregation.
          format: date
          title: Date
          type: string
        impressions:
          $ref: '#/components/schemas/Events'
        purchases:
          $ref: '#/components/schemas/Purchases'
      required:
        - impressions
        - clicks
        - purchases
        - date
      title: DailyReportData
      type: object
    DailyReportResponse:
      description: Response for daily aggregation reports
      properties:
        hasMore:
          description:
            Flag that indicates whether more results are available. `true`
            indicates there is a next page of results. `false` indicates  this response
            contains the last page of results.
          title: Hasmore
          type: boolean
        nextPage:
          type: string
          minLength: 1
          description:
            Pagination cursor. Provide this value as a `next_page` query
            parameter in a new request to retrieve the next page of results.
          x-examples:
            - SSBzb2xlbW5seSBzd2VhciB0aGF0IEkgYW0gdXAgdG8gbm8gZ29vZAo=
          title: Nextpage
        reports:
          description: A list with report data aggregated by day.
          items:
            $ref: '#/components/schemas/DailyReportData'
          title: Reports
          type: array
      required:
        - hasMore
        - reports
      title: DailyReportResponse
      type: object
    DspOnboardingStatus:
      properties:
        dsp:
          $ref: '#/components/schemas/PublicDSP'
        lastUpdated:
          description: When the status was last updated
          format: date-time
          title: Lastupdated
          type: string
        status:
          $ref: '#/components/schemas/OnboardingStatus'
      required:
        - dsp
        - status
        - lastUpdated
      title: DspOnboardingStatus
      type: object
    Events:
      description: Aggregation of events.
      properties:
        adSpent:
          description:
            Ad spent over a period of time, in minor units of currency
            according to ISO 4217.
          format: int64
          title: Adspent
          type: integer
        charged:
          description: Number of charged events.
          format: int64
          title: Charged
          type: integer
        total:
          description: Total number of events.
          format: int64
          title: Total
          type: integer
      required:
        - total
        - charged
        - adSpent
      title: Events
      type: object
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    JobDetailsResponse:
      properties:
        error:
          type: string
          description: Error message if the job failed.
          title: Error
        id:
          description: The unique identifier of the campaign.
          format: uuid
          title: Id
          type: string
        jobResponse:
          $ref: '#/components/schemas/CampaignCreationJobResult'
        requestType:
          $ref: '#/components/schemas/RequestType'
        status:
          $ref: '#/components/schemas/JobStatus'
      required:
        - id
        - requestType
        - status
      title: JobDetailsResponse
      type: object
    JobResponseBase:
      properties:
        jobId:
          description: The unique identifier for the queued job.
          format: uuid
          title: Jobid
          type: string
      required:
        - jobId
      title: JobResponseBase
      type: object
    JobStatus:
      enum:
        - PENDING
        - SUCCESS
        - FAILED
      title: JobStatus
      type: string
    ListAudiencesResponsePublic:
      properties:
        audiences:
          description: A list of audiences.
          items:
            $ref: '#/components/schemas/AudienceResponsePublic'
          title: Audiences
          type: array
        hasMore:
          description:
            Flag that indicates whether more results are available. `true`
            indicates there is a next page of results. `false` indicates  this response
            contains the last page of results.
          title: Hasmore
          type: boolean
        nextPage:
          type: string
          minLength: 1
          description:
            Pagination cursor. Provide this value as a `next_page` query
            parameter in a new request to retrieve the next page of results.
          x-examples:
            - SSBzb2xlbW5seSBzd2VhciB0aGF0IEkgYW0gdXAgdG8gbm8gZ29vZAo=
          title: Nextpage
      required:
        - hasMore
        - audiences
      title: ListAudiencesResponsePublic
      type: object
    ListCampaignsResponsePublic:
      properties:
        campaigns:
          description: A list of campaigns.
          items:
            $ref: '#/components/schemas/CampaignResponsePublic'
          title: Campaigns
          type: array
        hasMore:
          description:
            Flag that indicates whether more results are available. `true`
            indicates there is a next page of results. `false` indicates  this response
            contains the last page of results.
          title: Hasmore
          type: boolean
        nextPage:
          type: string
          minLength: 1
          description:
            Pagination cursor. Provide this value as a `next_page` query
            parameter in a new request to retrieve the next page of results.
          x-examples:
            - SSBzb2xlbW5seSBzd2VhciB0aGF0IEkgYW0gdXAgdG8gbm8gZ29vZAo=
          title: Nextpage
      required:
        - hasMore
        - campaigns
      title: ListCampaignsResponsePublic
      type: object
    OnboardingStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - COMPLETED
        - FAILED
      title: OnboardingStatus
      type: string
    PublicAdvertiserResponse:
      properties:
        dspOnboardingStatus:
          description: The onboarding status for each DSP
          items:
            $ref: '#/components/schemas/DspOnboardingStatus'
          title: Dsponboardingstatus
          type: array
        id:
          description: The ID of the advertiser
          title: Id
          type: string
        name:
          description: The name of the advertiser
          title: Name
          type: string
      required:
        - id
        - name
      title: PublicAdvertiserResponse
      type: object
    PublicDSP:
      enum:
        - google_ads
        - meta
      title: PublicDSP
      type: string
    PublicProductReportData:
      properties:
        clicks:
          $ref: '#/components/schemas/Events'
        impressions:
          $ref: '#/components/schemas/Events'
        productId:
          description: The id of the product whose report data we want to see
          title: Productid
          type: string
        purchases:
          $ref: '#/components/schemas/Purchases'
      required:
        - impressions
        - clicks
        - purchases
        - productId
      title: PublicProductReportData
      type: object
    PublicProductReportResponse:
      properties:
        hasMore:
          description:
            Flag that indicates whether more results are available. `true`
            indicates there is a next page of results. `false` indicates  this response
            contains the last page of results.
          title: Hasmore
          type: boolean
        nextPage:
          type: string
          minLength: 1
          description:
            Pagination cursor. Provide this value as a `next_page` query
            parameter in a new request to retrieve the next page of results.
          x-examples:
            - SSBzb2xlbW5seSBzd2VhciB0aGF0IEkgYW0gdXAgdG8gbm8gZ29vZAo=
          title: Nextpage
        reports:
          description: A list with report data, separated by product
          items:
            $ref: '#/components/schemas/PublicProductReportData'
          title: Reports
          type: array
      required:
        - hasMore
        - reports
      title: PublicProductReportResponse
      type: object
    Purchases:
      description: Aggregation of purchase events.
      properties:
        amount:
          description:
            Amount of money made by purchases over a period of time, in
            minor units of currency according to ISO 4217.
          format: int64
          title: Amount
          type: integer
        count:
          description: Amount of purchase events.
          format: int64
          title: Count
          type: integer
        countByProduct:
          type: object
          additionalProperties:
            type: integer
          description:
            Purchase count by product. Available if `count_by_product`
            is set to `true`.
          title: Countbyproduct
        quantity:
          description: Amount of items purchased.
          format: int64
          title: Quantity
          type: integer
      required:
        - amount
        - count
        - quantity
      title: Purchases
      type: object
    ReportData:
      description:
        Clicks, impressions and purchases attributed to this report item
        so far.
      properties:
        clicks:
          $ref: '#/components/schemas/Events'
        impressions:
          $ref: '#/components/schemas/Events'
        purchases:
          $ref: '#/components/schemas/Purchases'
      required:
        - impressions
        - clicks
        - purchases
      title: ReportData
      type: object
    RequestType:
      enum:
        - ADVERTISER_CREATION
        - CAMPAIGN_CREATION
        - CAMPAIGN_UPDATE
      title: RequestType
      type: string
    Status:
      enum:
        - ENABLED
        - PAUSED
        - REMOVED
      title: Status
      type: string
    UpdateCampaignRequestPublic:
      properties:
        budget:
          type: integer
          description: Optional new budget for the campaign.
          title: Budget
        endDate:
          type: string
          format: date-time
          description: Optional new end date for the campaign.
          title: Enddate
        geotargetingIds:
          type: array
          items:
            type: string
          description: Optional new list of geotargeting IDs.
          title: Geotargetingids
        name:
          type: string
          description: Optional new name for the campaign.
          title: Name
        productIds:
          type: array
          items:
            type: string
          description: Optional new list of product IDs.
          title: Productids
        startDate:
          type: string
          format: date-time
          description: Optional new start date (cannot be changed for started campaigns).
          title: Startdate
        status:
          $ref: '#/components/schemas/Status'
      title: UpdateCampaignRequestPublic
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
        - loc
        - msg
        - type
      title: ValidationError
      type: object
    DailyForecast:
      type: object
      required:
        - forecastDate
        - metrics
      properties:
        forecastDate:
          type: string
          format: date
          description: The date for which this forecast applies.
          example: '2023-07-15'
        metrics:
          type: array
          description: List of metrics forecasted for this date.
          items:
            $ref: '#/components/schemas/MetricForecast'

    MetricForecast:
      type: object
      required:
        - metricName
        - values
      properties:
        metricName:
          type: string
          description: Name of the forecasted metric.
          example: 'total_auctions'
        values:
          $ref: '#/components/schemas/ForecastValues'

    ForecastValues:
      type: object
      required:
        - forecastValue
        - forecastIntervalMin
        - forecastIntervalMax
      properties:
        forecastValue:
          type: number
          format: float
          description: The forecasted value for the metric.
          example: 15000
        forecastIntervalMin:
          type: number
          format: float
          description: The lower bound of the forecast confidence interval.
          example: 14200
        forecastIntervalMax:
          type: number
          format: float
          description: The upper bound of the forecast confidence interval.
          example: 15800

    InventoryForecast:
      type: object
      required:
        - inventoryType
        - inventoryValue
        - dailyForecasts
      properties:
        inventoryType:
          type: string
          description: The type of inventory (e.g., "category", "search").
          example: 'category'
          enum:
            - category
            - search
        inventoryValue:
          type: string
          description: The value of the inventory (e.g., category ID, search term).
          example: 'electronics'
        dailyForecasts:
          type: array
          description: List of daily forecasts for this inventory item. Empty if not enough data.
          items:
            $ref: '#/components/schemas/DailyForecast'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
