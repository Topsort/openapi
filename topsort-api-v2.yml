openapi: 3.0.1
info:
  title: Topsort Endpoints API Reference
  description: >-
    In order for a storefront to be able to run auctions in Topsort and report auction-related events back to Topsort,
    both the `/v2/auctions` and `/v2/events` endpoints must be integrated.
    Below are the endpoint and model definitions for each.
  contact:
    email: wicha@topsort.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: https://assets.website-files.com/61a717c57f45d64e5e24eebf/61ee6ccc3f6a684756ef6dec_logo.svg
    backgroundColor: '#fff'
    altText: Topsort
  version: 2.0.0

servers:
  - url: https://<slug>.api.sandbox.topsort.ai/v2
    description: Sandbox server (uses test data)
  - url: https://<slug>.api.topsort.ai/v2
    description: Production server (uses live data)

tags:
  - name: Auctions
    description: An auction determines which products should be promoted based on the vendors' bids.
  - name: Events (Beta)
    description: |
      **The specification details, particularly around placement data, may change in the short term.**
      **If this is not acceptable for your integration, please use [Events V1](https://openapi.topsort.com/api/v1#operation/reportEvent) as an alternative.**

      Significant consumer interactions on the marketplace app.
  - name: Models
    x-displayName: All Models
    description: |
      ## AssetSource
      <SchemaDefinition schemaRef="#/components/schemas/AssetSource" />

      ## Auction
      <SchemaDefinition schemaRef="#/components/schemas/Auction" />

      ## Auctions Request (Banners)
      <SchemaDefinition schemaRef="#/components/schemas/AuctionRequestBanners" />

      ## Auctions Request (Sponsored Listings)
      <SchemaDefinition schemaRef="#/components/schemas/AuctionRequestSponsoredListings" />

      ## Category
      <SchemaDefinition schemaRef="#/components/schemas/Category" />

      ## Click
      <SchemaDefinition schemaRef="#/components/schemas/Click" />

      ## Error
      <SchemaDefinition schemaRef="#/components/schemas/Error" />

      ## Events Request
      <SchemaDefinition schemaRef="#/components/schemas/EventsRequest" />

      ## Geotargeting
      <SchemaDefinition schemaRef="#/components/schemas/GeoTargeting" />

      ## Impression
      <SchemaDefinition schemaRef="#/components/schemas/Impression" />

      ## Products
      <SchemaDefinition schemaRef="#/components/schemas/Products" />

      ## Purchase
      <SchemaDefinition schemaRef="#/components/schemas/Purchase" />

      ## Purchase Item
      <SchemaDefinition schemaRef="#/components/schemas/PurchaseItem" />

      ## Winner
      <SchemaDefinition schemaRef="#/components/schemas/Winner" />

security:
  - BearerAuth: []

paths:
  /auctions:
    post:
      tags:
        - Auctions
      summary: Create new auctions
      operationId: createAuctions
      requestBody:
        description: >
          The information describing what will be auctioned.
          Topsort will run an auction for each batched auction request, for which products, brands and/or vendors' bids will compete against each other.
          Provided fields are additive, in the sense that only bids that match all filtering fields are considered (e.g. in the example below, only bids for products in the c_yogurt category that match the "Noosa Peach" search string will participate in the auction).
        content:
          application/json:
            schema:
              type: object
              properties:
                auctions:
                  type: array
                  items:
                    $ref: '#/components/schemas/AuctionRequest'
                  minItems: 1
                  maxItems: 5
              required:
                - auctions
              example:
                auctions:
                  - type: listings
                    slots: 2
                    products:
                      ids:
                        - p_PJbnN
                        - p_ojng4
                        - p_8VKDt
                        - p_Mfk15
                    geoTargeting:
                      location: New York
                  - type: banners
                    slots: 1
                    aspectRatio: '4:1'
                    category:
                      id: c_yogurt
                  - type: banners
                    slots: 1
                    aspectRatio: '3:2'
                    searchQuery: Noosa Peach
        required: true
      responses:
        201:
          description: >
            The auction results.
            The list of winners will contain at most `slots` entries per auction.
            It may contain fewer or no entries at all if there aren't enough products with usable bids, that is,
            a bid amount greater than the reserve price and belonging to a campaign with enough remaining budget.
            Bids become unusable if campaign budget is exhausted, the bid is disqualified to preserve spend pacing, etc.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Auction'
                    minItems: 1
                    maxItems: 5
                required:
                  - results
                example:
                  results:
                    - winners:
                        - rank: 1
                          type: product
                          id: p_Mfk15
                          resolvedBidId: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
                        - rank: 2
                          type: product
                          id: p_PJbnN
                          resolvedBidId: WyJlX1BKYm5OIiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
                      error: false
                    - winners:
                        - rank: 1
                          type: product
                          id: p_PJbnN
                          resolvedBidId: WyJlX1BKYm5OIiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwiYmFubmVyQWRzIiwiZGVmYXVsdCIsIiJd
                          asset:
                            - url: https://topsort.cdnprovider.com/lhs-banner-image-for-p_PJbnN-1x.png
                      error: false
                    - winners: {}
                      error: false
        401:
          $ref: '#/components/responses/UnauthorizedError'
        400:
          $ref: '#/components/responses/BadRequest'
        402:
          $ref: '#/components/responses/PaymentRequired'
  /events:
    post:
      tags:
        - Events (Beta)
      summary: Report events
      operationId: reportEvents
      requestBody:
        description: | # Pipe preserves newlines
          Use the `/events` endpoint to notify Topsort about significant consumer interactions on the marketplace app:
          - **Impressions** — an impression means a promotable has become visible to the consumer.
          - **Clicks** — a click is sent to Topsort when the consumer has clicked on a promotable.
          - **Purchases** — a purchase is sent to Topsort once a consumer places an order.

          For promoted interactions, include the `resolvedBidId` field from the `/v2/auctions` response.
          For unpromoted interactions, include the `entity` field to describe what was interacted with.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventsRequest'
        required: true
      responses:
        204:
          description: All events were reported successfully.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        400:
          $ref: '#/components/responses/BadRequest'

components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    PaymentRequired:
      description: A monthly invoice has been issued and payment is late
    BadRequest:
      description: HTTP status codes as registered with IANA.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Category:
      type: object
      description: An object describing the category of the bids that will participate in an auction.
      required:
        - id
      properties:
        id:
          type: string
          description: The marketplace's ID of the category for which an auction will be run.
          example: c_yogurt

    Device:
      type: string
      description: The device for which the ads are meant for.
      enum:
        - desktop
        - mobile
      default: desktop

    GeoTargeting:
      type: object
      description: An object describing geographical information associated with this auction.
      required:
        - location
      properties:
        location:
          description: The location this banner is being run for.
          type: string

    AuctionRequestSponsoredListings:
      type: object
      # TODO: add back category and searchQuery to description when supported
      description: >
        Describes the intent of running a sponsored listings auction.
        At least one of the following fields must be set: category,
        products.
      properties:
        type:
          type: string
          enum:
            - listings
          description: Discriminator for the type of auction.
        slots:
          type: integer
          format: int32
          minimum: 1
          description: Specifies the maximum number of auction winners that should be returned.
        # category:
        #   $ref: '#/components/schemas/Category'
        # searchQuery:
        #   type: string
        #   description: The search string provided by a user.
        products:
          $ref: '#/components/schemas/Products'
        geoTargeting:
          $ref: '#/components/schemas/GeoTargeting'
      required:
        - type
        - slots
        - products
      example:
        type: listings
        slots: 2
        products:
          ids:
            - p_PJbnN
            - p_ojng4
            - p_8VKDt
            - p_Mfk15
        # category:
        #   id: c_yogurt
        # searchQuery: Noosa Peach
        geoTargeting:
          location: New York

    AuctionRequestBanners:
      type: object
      description: >
        Describes the intent of running a banner ads auction.
        Only one field between category and searchQuery must be provided.
      properties:
        type:
          type: string
          enum:
            - banners
          description: Discriminator for the type of auction.
        slots:
          type: integer
          format: int32
          minimum: 1
          description: Specifies the maximum number of auction winners that should be returned.
        category:
          $ref: '#/components/schemas/Category'
        searchQuery:
          type: string
          description: The search string provided by a user.
        device:
          $ref: '#/components/schemas/Device'
        aspectRatio:
          type: string
          pattern: '^\d+:\d+$'
          description: >
            The aspect ratio for a specific slot for a banner placement in the marketplace app.
            The aspect ratio for the category (or home page, if no category ID was provided in the request) must have been previously set up in the Topsort app.
      required:
        - type
        - slots
        - aspectRatio
      example:
        type: banners
        slots: 1
        aspectRatio: '4:1'
        category:
          id: c_yogurt

    AuctionRequest:
      description: Describes the intent of running a single auction.
      oneOf:
        - $ref: '#/components/schemas/AuctionRequestSponsoredListings'
        - $ref: '#/components/schemas/AuctionRequestBanners'
      discriminator:
        propertyName: type
        mapping:
          listings: '#/components/schemas/AuctionRequestSponsoredListings'
          banners: '#/components/schemas/AuctionRequestBanners'

    Auction:
      type: object
      properties:
        winners:
          type: array
          items:
            $ref: '#/components/schemas/Winner'
          description: >
            Array of winner objects in order from highest to lowest bid.
            It will be empty if there were no qualifying bids or if there was an error.
        error:
          type: boolean
          description: A boolean indicating whether this auction was resolved successfully.
          example: false
      required:
        - winners
        - error

    # Dimensions:
    #   type: object
    #   description: The dimensions of this source.
    #   properties:
    #     width:
    #       type: integer
    #       format: int32
    #       description: The source width in pixels.
    #       minimum: 1
    #     height:
    #       type: integer
    #       format: int32
    #       description: The source height in pixels.
    #       minimum: 1
    #   required:
    #     - width
    #     - height

    AssetSource:
      description: A source available for an asset (banner or video).
      type: object
      properties:
        # mimeType:
        #   type: string
        #   description: The MIME type of this source.
        #   example: image/png
        # dimensions:
        #   $ref: '#/components/schemas/Dimensions'
        # fileSize:
        #   type: integer
        #   format: int32
        #   description: The file size in bytes.
        #   example: 238490
        url:
          type: string
          format: uri
          description: >
            A vendor provided asset that the marketplace has to use as a banner.
            The asset will be served by Topsort's CDN.
      required:
        # - mimeType
        # - dimensions
        # - fileSize
        - url

    Winner:
      type: object
      required:
        - rank
        - type
        - id
        - resolvedBidId
      properties:
        rank:
          type: integer
          format: int32
          description: >
            Where the product's bid ranked in the auction.
            One-based, so the product with rank 1 won the auction.
            In an auction response, the winners array is sorted so rank will match the entry's index.
          minimum: 1
        type:
          type: string
          description: The type of the winning bid.
          enum:
            - product
            - vendor
        id:
          type: string
          description: The marketplace's ID of the winning entity, depending on the campaign.
          example: p_Mfk15
        resolvedBidId:
          type: string
          description: An opaque Topsort ID to be used when this item is interacted with.
          example: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
        asset:
          description: The list of available sources for an asset (banner or video).
          type: array
          items:
            $ref: '#/components/schemas/AssetSource'
          minItems: 1

    Products:
      required:
        - ids
      type: object
      properties:
        ids:
          type: array
          description: An array of product IDs that should participate in the auction.
          items:
            type: string
            description: >
              The marketplace's ID of a product which will participate in the auction.
              These ID must match those in the catalog integration with Topsort.
            example: p_SA0238
            uniqueItems: true
            minLength: 1
          minItems: 1
          maxItems: 10000
        qualityScores:
          type: array
          description: |
            An array of marketplace defined quality scores, each corresponding to the product ID with matching array index.
            If given, these values will be combined with our internal quality scores to provide a score
            that better represents the relevance of the participating products.
            Note that the length of this array must be the same as the length of the `ids` array and
            that the values must be between 0 and 1.
          items:
            type: number
            minimum: 0
            maximum: 1
            example: 0.75
            format: float
          minItems: 1
          maxItems: 10000

    Error:
      type: object
      required:
        - errCode
      properties:
        errCode:
          type: string
          description: A short string uniquely identifying the problem.
          enum:
            - bad_request
            - empty_request
            - internal_server_error
            - invalid_api_key
            - invalid_auction_id
            - invalid_event_type
            - invalid_promotion_type
            - invalid_session
            - missing_aspect_ratio
            - missing_auctions
            - missing_context
            - missing_placement
            - missing_product_id
            - missing_promotion_type
            - missing_purchased_at
            - missing_session
            - missing_slots
            - no_products
            - no_purchase_items
            - purchase_item_quantity_less_or_equal_than_zero
            - resolved_bid_id_not_found
            - too_few_impressions
            - too_few_slots
            - too_many_auctions
        docUrl:
          type: string
          format: uri
          description: A link to a documentation page providing more information about the error.
          example: https://docs.topsort.com/reference/errors
        message:
          type: string
          description: >
            Human-readable explanation of or details about the error.
            The string for a given error may change over time; code should not parse or dispatch based on particular values for this field.
    Placement:
      type: object
      required:
        - path
      additionalProperties: false
      properties:
        path:
          type: string
          description: |
            URL path of the page triggering the event.

            For web apps, this can be obtained in JS using `window.location.pathname`.

            For mobile apps, use the deep link for the current view, if available.
            Otherwise, encode the view from which the event occurred in your app as a path-like string (e.g. `/root/categories/:categoryId`).
          minLength: 1
          example: /categories/dairy
        position:
          type: integer
          description: >
            For components with multiple items
            (i.e. search results, similar products, etc),
            this should indicate the index of a given item within that list.
          minimum: 1
        page:
          type: integer
          description: >
            For paginated pages, this should indicate which page number triggered the event.
          minimum: 1
        pageSize:
          type: integer
          description: >
            For paginated pages this should indicate how many items are in each result page.
          minimum: 1
          example: 15
        productId:
          type: string
          description: >
            The ID of the product associated to the page in which this event occurred, if applicable.
            This ID must match the ID provided through the catalog service.
          minLength: 1
        categoryId:
          type: string
          description: >
            The ID of the category associated to the page in which this event occurred, if applicable.
            This ID must match the ID provided through the catalog service.
          minLength: 1
        searchQuery:
          type: string
          description: >
            The search string provided by the user in the page where this event occurred, if applicable.
            This search string must match the searchQuery field that was provided in the auction request (if provided).
          minLength: 1
    Entity:
      type: object
      description: The entity associated with the promotable over which the interaction occurred.
      required:
        - id
        - type
      additionalProperties: false
      properties:
        id:
          type: string
          description: The marketplace's ID of the entity associated with the interaction.
          minLength: 1
        type:
          type: string
          description: The type of entity associated with the interaction.
          enum:
            - product
            - vendor
    EventsRequest:
      type: object
      additionalProperties: false
      properties:
        impressions:
          type: array
          items:
            $ref: '#/components/schemas/Impression'
          minItems: 1
          maxItems: 50
        clicks:
          type: array
          items:
            $ref: '#/components/schemas/Click'
          minItems: 1
          maxItems: 50
        purchases:
          type: array
          items:
            $ref: '#/components/schemas/Purchase'
          minItems: 1
          maxItems: 50
      minProperties: 1
      example:
        impressions:
          - id: eb874c98-bf4d-40a9-ae6d-fcf4cecb535c
            occurredAt: '2019-01-01T12:59:59-05:00'
            opaqueUserId: 71303ce0-de89-496d-8270-6434589615e8
            placement:
              path: /categories/dairy
              position: 1
              page: 1
              pageSize: 15
              categoryId: 9BLIe
            resolvedBidId: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
        clicks:
          - id: b39d39ed-ea0e-4059-9d15-4990b39c85a2
            occurredAt: '2019-01-01T13:01:42-05:00'
            opaqueUserId: 71303ce0-de89-496d-8270-6434589615e8
            placement:
              path: /categories/dairy
              position: 1
              page: 1
              pageSize: 15
              categoryId: 9BLIe
            resolvedBidId: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
        purchases:
          - id: 0e06c899-b2cd-4e0d-b0de-8aefb4b6d0a0
            items:
              - productId: p_SA0238
                unitPrice: 12.95
                quantity: 2
              - productId: p_oajf2D
                unitPrice: 1.49
            occurredAt: '2019-01-01T12:59:59-05:00'
            opaqueUserId: 71303ce0-de89-496d-8270-6434589615e8
    Impression:
      type: object
      description: >
        An impression means a promotable has become visible to the consumer.
        For promoted entities, include the `resolvedBidId` field from the `/v2/auctions` response.
        For unpromoted entities, include the `entity` field to describe what was seen.
        In case you cannot send an impression when the product becomes visible, send us an impression event when the product was rendered in the HTML or, if that's also not possible, when your API returns the results.
        It is important to select the most specific event so that your vendors have more accurate CTR metrics, which will allow them to better predict their campaigns.
      required:
        - occurredAt
        - opaqueUserId
        - id
      additionalProperties: false
      properties:
        resolvedBidId:
          type: string
          description: If the impression is over an ad promotion, this is the `resolvedBidId` field received from the `/auctions` request.
          example: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
        entity:
          $ref: '#/components/schemas/Entity'
        placement:
          $ref: '#/components/schemas/Placement'
        occurredAt:
          type: string
          format: date-time
          description: RFC3339 formatted timestamp including UTC offset.
          example: '2009-01-01T12:59:59-05:00'
        opaqueUserId:
          type: string
          description: >
            The opaque user ID allows correlating user activity, whether or not they are actually logged in.
            It must be long lived.
          example: 71303ce0-de89-496d-8270-6434589615e8
        id:
          type: string
          description: >
            The marketplace's unique ID for the impression.
            This field ensures the event reporting is idempotent in case there is a network issue and the request is retried.
            If there is no impression model on the marketplace side, generate a unique string that does not change if the event is resent.
          example: eb874c98-bf4d-40a9-ae6d-fcf4cecb535c
    Click:
      description: >
        A click is sent to Topsort when the consumer has clicked on a promotable.
        For promoted entities, include the `resolvedBidId` field from the `/v2/auctions` response.
        For unpromoted entities, include the `entity` field to describe what was clicked.
        Topsort charges the vendor and pays the marketplace for clicks on ads in promoted placements on the marketplace app.
      type: object
      required:
        - occurredAt
        - opaqueUserId
        - id
      additionalProperties: false
      properties:
        resolvedBidId:
          type: string
          description: If the click is over an ad promotion, this is the `resolvedBidId` field received from the `/auctions` request.
          example: WyJiX01mazE1IiwiMTJhNTU4MjgtOGVhZC00Mjk5LTgzMjctY2ViYjAwMmEwZmE4IiwibGlzdGluZ3MiLCJkZWZhdWx0IiwiIl0=
        entity:
          $ref: '#/components/schemas/Entity'
        placement:
          $ref: '#/components/schemas/Placement'
        occurredAt:
          type: string
          format: date-time
          description: RFC3339 formatted timestamp including UTC offset.
          example: '2009-01-01T12:59:59-05:00'
        opaqueUserId:
          type: string
          description: >
            The opaque user ID allows correlating user activity, whether or not they are actually logged in.
            It must be long lived.
          example: 71303ce0-de89-496d-8270-6434589615e8
        id:
          type: string
          description: >
            The marketplace's unique ID for the click.
            This field ensures the event reporting is idempotent in case there is a network issue and the request is retried.
            If there is no click model on the marketplace side, generate a unique string that does not change if the event is resent.
          example: b39d39ed-ea0e-4059-9d15-4990b39c85a2
    Purchase:
      description: >
        A purchase is sent to Topsort once a marketplace customer places an order.
        These events are used to measure the effectiveness of an ad campaign.
      type: object
      required:
        - occurredAt
        - opaqueUserId
        - items
        - id
      additionalProperties: false
      properties:
        occurredAt:
          type: string
          description: RFC3339 formatted timestamp, including UTC offset, of the instant in which the order was placed.
          example: '2021-10-12T07:20:50.52Z'
          format: date-time
        opaqueUserId:
          type: string
          description: >
            The opaque user ID allows correlating user activity, whether or not they are actually logged in.
            It must be long lived.
          example: 71303ce0-de89-496d-8270-6434589615e8
        items:
          type: array
          description: Items purchased.
          minItems: 1
          items:
            $ref: '#/components/schemas/PurchaseItem'
        id:
          type: string
          description: >
            The marketplace unique ID for the order.
            This field ensures the event reporting is idempotent in case there is a network issue and the request is retried.
            If there is no unique ID for orders on the marketplace side, generate a unique string that does not change if the event needs to be resent.
          example: 0e06c899-b2cd-4e0d-b0de-8aefb4b6d0a0
    PurchaseItem:
      type: object
      required:
        - productId
        - unitPrice
      additionalProperties: false
      properties:
        productId:
          type: string
          description: The marketplace ID of the product being purchased.
          example: p_SA0238
        quantity:
          type: integer
          minimum: 1
          default: 1
          description: Count of products purchased.
          example: 2
        unitPrice:
          type: number
          format: double
          minimum: 0.0
          exclusiveMinimum: true
          description: The price of a single item in the marketplace currency.
          example: 12.95

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
